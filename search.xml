<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建⭕⭕服务器</title>
      <link href="2021/05/19/build-shadowsocks/"/>
      <url>2021/05/19/build-shadowsocks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>简单记录搭建过程…希望不会被请喝茶🍵</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><table><thead><tr><th>服务器</th><th>腾讯-轻量应用服务器</th></tr></thead><tbody><tr><td>系统</td><td>CentOS 7.9.2009(Py3.7.9)</td></tr><tr><td>面板版本</td><td>宝塔-免费版 7.5.2</td></tr><tr><td>地域</td><td>中国香港</td></tr><tr><td>实例规格</td><td>CPU: 1核，内存: 1GB</td></tr><tr><td>磁盘</td><td>系统盘：25GB</td></tr><tr><td>流量包套餐</td><td>峰值带宽 30Mbps，流量包 1024GB/月</td></tr><tr><td>价格</td><td>24元/月</td></tr></tbody></table><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><ol><li>安装pip</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> python-pip</code></pre><ol start="2"><li>安装shadowsocks</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> https://github.com/shadowsocks/shadowsocks/archive/master.zip -U</code></pre><p>安装shadowsocks会遇到的坑：目前最新的客户端(4.4.0.0)仅支持如下加密方式：aes-128-gcm、aes-192-gcm、aes-256-gcm、chacha20-ietf-poly1305、xchacha20-ietf-poly1305，而网上大部分教程仍在使用aes-128-cfb，所以你会尴尬地发现客户端没有与服务端对应的加密方式。解决方法有两个：</p><ul><li>使用低版本的客户端，例如：4.1.8（过时的加密方式会带来安全隐患）</li><li>安装最新的服务端（3.0.0）参考链接👉<a href="https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&tid=188059">求教如何让ss客户端支持aes-256-gcm加密方式 - (ubuntukylin.com)</a>，也就是使用上面的pip命令安装。</li></ul><ol start="3"><li>安装Supervisor管理器 2.2</li></ol><ul><li>略</li></ul><ol start="4"><li>启动服务</li></ol><ul><li>打开Supervisor管理器-&gt;添加守护进程-&gt;填写如下启动命令-&gt;确定</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">ssserver -s <span class="token number">0.0</span>.0.0 -p <span class="token number">23333</span> -k <span class="token operator">&lt;</span>password<span class="token operator">></span> -m aes-256-gcm</code></pre><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><ol><li>安装最新的客户端：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases/">Releases · shadowsocks/shadowsocks-windows (github.com)</a></li><li>填写服务器地址、端口、密码、加密方式，Done！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
          <category> 自制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈对未来工作的规划</title>
      <link href="2021/02/15/about-my-job/"/>
      <url>2021/02/15/about-my-job/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>大家好，我是你们干啥啥不行，摸鱼第一名的虚无程序⚪🤪</p><p>书接上回：</p><blockquote><p>2020是艰难的一年，对于我来说是“失业”的一年。啊不，准确地说是闭门造车的一年。作为信管专业的学生，想正儿八经地找份计算机相关工作并非易事，专业技能比不过CS、管理经验比不过MBA，选一项而专精之…</p></blockquote><span id="more"></span> <p>​    自18年毕业，陆陆续续折腾了快3年。最早因为喜欢攻壳机动队这类作品，想从事人工智能，在大三跟风考研（胡乱报的专业）失败后一头又扎进了MLDL算法里。由于缺乏专业的指导，使得入门一直是举步维艰。后来结识了一位材料学硕士欲转计算机的同道中人，我们便开始研究。当时两人的目标都是从事NLP相关工作，但是两人选择了截然不同的实现路线。众所周知，好点的公司的算法岗要求硕士起步，学历这块卡的死死的。他有硕士背景，通过外包进入了OPPO，而我选择先从事数据分析岗积累经验再通过考研提升学历的方式进了甲方。</p><p>​    上一家公司属于家居零售行业，公司规模有1000多人，截至到离职全国共有100多家门店，属于中小型企业。通俗的来讲，日常工作是给门店配货，给其他部门拉数据。咳咳，高大上来讲，通过分析门店销售情况，结合天气、节假日等多方面因素，研究一套算法，针对不同店面所覆盖的客户人群进行有针对的配补货计划，节省不必要的物流与仓储成本，并将这一过程整合到业务系统，完善企业信息化。现实往往不尽如人意，去年由于疫情加上IT部管理层相继离职，项目推进的重任便落在我身上（吸气…哈…）公司营收受挫，内部资源往电商部偏移，IT部从有力驱动彻底沦为打杂…（无法分析.jpg 原定工作两年再考研的计划被迫提前…</p><p>​    再说同道中人，他所处的环境，身边不乏清北、海归大佬，工作996，周末陪老婆，业余时间少的可怜。啊这，真996竟在我身边，学霸的世界竟恐怖如斯😦即使是这样，他一直说无法入门（黑人问号.jpg ，结论是学历问题，打算2021年读研。</p><p>​    前几天，跟前总监聊了解到，他们几个人在合伙做创业项目，业务内容依然是销售为主（销售PTSD，工作内容包括业务标准化，要解决物流车的路线规划以及排车逻辑。据我所知，路线规划问题当它仅仅是课本上的问题时才能称之为问题，现实落地实为难题，其中要考量车辆管理、驾驶员安全驾驶管理、路线管理…地图的更新、道路行驶限制… P.S. 总监的离职跟疫情没半毛钱关系，之前ERP、标准化、信息化等项目都由他推进，是一个为人还不错的领导。</p><blockquote><p>前总监:<br>业务模式不难，也很传统，盈利情况也还好吧估计，主要是比较占用资金。我们几个凑了几百万。属于创业项目，但目前应该有差不多1000万/年的业务量了。我们主要是想把这个业务做的更有技术，所以前期肯定会什么都做，什么都接触。</p><p>我:<br>刚了解了一下，路径规划这种问题是需要来自地图公司的最新数据，而且道路适不适合货车通过也是问题，恐怕不是几个人能完成的</p><p>前总监:<br>这里有几种实现层次。简单的可以仅基于百度等提供的平均到达时长来做计算，这种就是简单的静态的吧。稍难一些的可能会有车在路上不断的移动，接到订单后根据车辆的实时位置，基于前面的平均时长去匹配最优配送车辆。</p><p>前总监:<br>我能想到但是更难一些的就考虑实时路况信息。</p><p>我:<br>数据来源是个问题</p><p>前总监:<br>长远实现肯定需要搭业务系统，与百度做接口，动态访问路况数据</p><p>前总监:<br>当然如果是简单的静态的话，只要定期（比如每天或每周更新数据）访问就可以。</p><p>我:<br>了解</p><p>前总监:<br>业务系统我还没想好怎么搭，需要前期过去了解下情况。看看能否找到可以修改的现成方案，这样节省很多时间和成本。如果要完全自己做就工程大了。。</p><p>前总监:<br>也不排除像[数据删除]那样过程中搞个半成品那样用着，毕竟成本和效率要统筹考虑</p></blockquote><p>按照总监的说法，要做长远的打算，自己开发业务系统。</p><p>​    总而言之，当前我还有四种选择，①后端开发②软件测试③老本行——数据分析（互联网企业优先）④再备考一年，优先级③→④→②→① 根据当前掌握的技能，未来报考数学专业未尝不可，具体情况有待观察。</p><p>​    嗯，就是这样！</p>]]></content>
      
      
      <categories>
          
          <category> 记录生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>📆关于朋友成为Vup出道这件事</title>
      <link href="2021/01/31/daily-record-4/"/>
      <url>2021/01/31/daily-record-4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>2020是艰难的一年，对于我来说是“失业”的一年。啊不，准确地说是闭门造车的一年。作为信管专业的学生，想正儿八经地找份计算机相关工作并非易事，专业技能比不过CS、管理经验比不过MBA，选一项而专精之。遂苦读408、数一、英一、政治，在复习了6个月后发现考研并非我真正追求（，于是开始寻找感兴趣的事。</p><p>6月底，云游君的Hexo主题。初见是在CSDN，那会儿在评论区偶遇正在打广告地云游，于是顺着链接发现了这款主题。二次元计算机硕士？这不正是我该学习地榜样吗。随后见证了1.0.0版本正式发布，见证了从100⭐到如今400+⭐</p><p>7月初，拥有自己的博客。基于Hexo的博客，对于萌新来说，新鲜感促使我学习新知识。从记录中慢慢的找到了学习计算机的方法</p><p>10月底，成为“乐子人”。懂得都懂，让原本有些抑郁的心豁然开朗🤡</p><p>12月底，拥有自己的服务器。终于可以摆弄一些超酷的东西啦，搞起搞起~</p><p>今年初，拥有el-bot。基于miari-ts开发的QQ机器人，作者依然是云游君。二次元独有的浪漫，对味👍</p><p>今天下午，朋友正式成为Vup出道啦！</p><blockquote><p>啾啾~</p><p>这里是Nova社所属的虚拟主播樱遇猫哦</p><p>是一个来自异世界的猫头鹰族亚人</p><p>现在正在学习这个世界的人类语言哦</p><p>名字的来源是妈妈在生我的时候正好是樱花🌸盛开的季节</p><p>所以就起了樱（鹰）遇猫这个名字哦</p><p>头上的鸽子是我的远房表鸽（不过目前还不会说话</p><p>希望大家多多支持哦~</p></blockquote><p>B站：<a href="https://space.bilibili.com/9546186/">樱遇猫Nya</a></p><p>鹰姐姐的温暖鸟窝👉 780850802 </p><p>🦅🐟🐱不愧是学美声的，是一位非常亚撒西的小姐姐哦(<em>^_^</em>)</p><p>过去的一年虽然很难，但是身边还有这么多有趣的事物等着去发现、还有那么多vtuber等着去D、还有那么多新技术等着去探索……</p><p>新的一年也要加油鸭~</p>]]></content>
      
      
      <categories>
          
          <category> 记录生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> vtuber </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地Hexo代码搬运至服务器</title>
      <link href="2021/01/18/move-hexo-to-server/"/>
      <url>2021/01/18/move-hexo-to-server/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>因为刚好有时间，刚好有台服务器，刚好有个hexo博客<br>于是萌生了把本地的hexo代码移植到服务器的想法<br>以便随时<del>水</del>更新文章😁</p><blockquote><p>总的来说参考 <a href="https://www.yunyoujun.cn/share/how-to-build-your-site/">云游的建站小指南</a> 就OK了</p><p>不过仍有些需要注意的点</p></blockquote><span id="more"></span><blockquote><p>从这里开始默认你已经掌握hexo的搭建方法，否则老老实实去看👆建站指南</p><p>其实200多天前我也是个小白😋多多记录，努力变强( •̀ ω •́ )✧</p></blockquote><h2 id="当前状况"><a href="#当前状况" class="headerlink" title="当前状况"></a>当前状况</h2><ul><li><p><input checked="" disabled="" type="checkbox">  已有Github</p></li><li><p><input checked="" disabled="" type="checkbox">  已有仓库</p></li><li><p><input checked="" disabled="" type="checkbox">  仓库绑定域名</p></li><li><p><input checked="" disabled="" type="checkbox">  安装Node.js</p></li><li><p><input checked="" disabled="" type="checkbox">  安装hexo-cli</p></li><li><p><input checked="" disabled="" type="checkbox">  安装Hexo-theme-yun</p></li><li><p><input checked="" disabled="" type="checkbox">  覆盖_config.yml</p></li><li><p><input checked="" disabled="" type="checkbox">  覆盖source目录</p></li><li><p><input checked="" disabled="" type="checkbox">  覆盖package.json</p></li><li><p><input checked="" disabled="" type="checkbox">  修改yun主题默认网站图标</p></li></ul><h2 id="需要强调"><a href="#需要强调" class="headerlink" title="需要强调"></a>需要强调</h2><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><p>为了更方便的部署到 GitHub Pages，Hexo 提供了 <code>hexo-deployer-git</code> 插件。</p><pre class="language-sh" data-language="sh"><code class="language-sh">npm install hexo-deployer-git</code></pre><p>在 <code>_config.yml</code> 中配置。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> 你此前新建的仓库的链接 <span class="token comment"># 比如：git@github.com:Sknp1006/sknplz.git</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master <span class="token comment"># 默认使用 master 分支</span>  <span class="token key atrule">message</span><span class="token punctuation">:</span> Update Hexo Static Content <span class="token comment"># 你可以自定义此次部署更新的说明</span></code></pre><pre class="language-sh" data-language="sh"><code class="language-sh">hexo deploy</code></pre><p>执行该代码，会在博客根目录下新建 <strong>.deploy_git</strong> 文件夹，之后便会部署到master分支</p><blockquote><p>P.S. 若配置了rsa，需要将 <strong>.ssh</strong> 文件夹下的 <code>id_rsa</code> 与 <code>id_rsa.pub</code> 复制到 服务器的 <strong>root/.ssh</strong> 目录下</p></blockquote><h3 id="与远程仓库建立关联"><a href="#与远程仓库建立关联" class="headerlink" title="与远程仓库建立关联"></a>与远程仓库建立关联</h3><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><pre class="language-sh" data-language="sh"><code class="language-sh">git init # 初始化 Git 仓库，只需要执行一次即可</code></pre><p>执行该代码，会在博客根目录下新建 <strong>.git</strong> 文件夹</p><p>在将其部署到 GitHub Pages 上之前，我们最好先建立一个分支。</p><blockquote><p>什么是分支？<br>Git 提供了版本管理功能，其中还有一个分支功能，你现在可以简单地将其理解为平行世界。</p></blockquote><pre class="language-sh" data-language="sh"><code class="language-sh">git checkout -b hexo</code></pre><p>这时便成功建立了一个 hexo 分支。（此后的工作都将在 hexo 分支下进行）</p><p>你可以通过 <code>git branch -v</code> 来查看当前有哪些分支，使用 <code>git checkout 分支名</code> 来切换到对应的分支。</p><h3 id="备份源代码"><a href="#备份源代码" class="headerlink" title="备份源代码"></a>备份源代码</h3><p>我们当前只是将生成的静态文件部署到了云端。</p><p>为了以防万一，我们应该将网站的源代码文件也推送到 GitHub 仓库备份。</p><pre class="language-sh" data-language="sh"><code class="language-sh"># 与远程 Git 仓库建立连接，只此一次即可git remote add origin https:&#x2F;&#x2F;github.com&#x2F;你的用户名&#x2F;你的名字.github.io# git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Sknp1006&#x2F;sknplz</code></pre><p>接下来准备提交，这几句命令将是你以后每次备份所需要输入。</p><pre class="language-sh" data-language="sh"><code class="language-sh"># 添加到缓存区git add -Agit commit -m &quot;这次做了什么更改，简单描述下即可&quot;# 推送至远程仓库git push# 第一次提交，你可能需设置一下默认提交分支# git push --set-upstream origin hexo</code></pre><p>每次推送都要输入这三条命令，你可能觉得有些麻烦。<br>那么你可以编写 bash 脚本。</p><p>譬如，在根目录下新建 <code>update.sh</code>。</p><pre class="language-sh" data-language="sh"><code class="language-sh"># 如果没有消息后缀，默认提交信息为 &#96;:pencil: update content&#96;info&#x3D;$1if [&quot;$info&quot; &#x3D; &quot;&quot;];then info&#x3D;&quot;:pencil: update content&quot;figit add -Agit commit -m &quot;$info&quot;git push origin hexo</code></pre><blockquote><p>P.S. 此代码若是运行在linux环境，建议用vim手敲，此后更新的话，只需要在终端执行 <code>sh update.sh</code> </p></blockquote><blockquote><p>P.S. 如果你尝试过却不成功，可以试试在github上把hexo分支设置为default ，顺便多练几遍git命令</p><p>相信我，当你一筹莫展的时候，不妨静下心来看看 <a href="https://www.yunyoujun.cn/note/git-learn-note/">Git 学习笔记</a></p></blockquote><p>成功后你将看到：</p><pre class="language-sh" data-language="sh"><code class="language-sh">Last login: Tue Jan 19 08:59:33 2021 from 127.0.0.1[root@VM-0-12-centos ~]# cd &#x2F;home&#x2F;github&#x2F;sknplz.xyz[root@VM-0-12-centos sknplz.xyz]# git add -A[root@VM-0-12-centos sknplz.xyz]# git commit -m &quot;:pencil update content&quot;[hexo ddc4ab2] :pencil update content 1 file changed, 8 deletions(-) delete mode 100755 bash&#x2F;backup.sh[root@VM-0-12-centos sknplz.xyz]# git push origin hexoUsername for &#39;https:&#x2F;&#x2F;github.com&#39;: Sknp1006Password for &#39;https:&#x2F;&#x2F;Sknp1006@github.com&#39;: Enumerating objects: 3, done.Counting objects: 100% (3&#x2F;3), done.Delta compression using up to 2 threadsCompressing objects: 100% (2&#x2F;2), done.Writing objects: 100% (2&#x2F;2), 226 bytes | 226.00 KiB&#x2F;s, done.Total 2 (delta 1), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (1&#x2F;1), completed with 1 local object.To https:&#x2F;&#x2F;github.com&#x2F;Sknp1006&#x2F;sknplz   1806f2b..ddc4ab2  hexo -&gt; hexo</code></pre><h2 id="通过actions-gh-pages自动部署"><a href="#通过actions-gh-pages自动部署" class="headerlink" title="通过actions-gh-pages自动部署"></a>通过actions-gh-pages自动部署</h2><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">name</span><span class="token punctuation">:</span> GitHub Pages<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hexo<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">submodules</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"14.x"</span>      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn build      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy        <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./public          <span class="token key atrule">publish_branch</span><span class="token punctuation">:</span> master          <span class="token key atrule">force_orphan</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>根据云游君的提示，去掉夹在 <code>yarn install</code> 与 <code>yarn build</code> 之间的 <code>algolia</code> 部分，直接粘贴到你的 <code>.github/workflows/</code> 文件夹（自己新建）下 <code>xxx.yml</code> 文件里。</p><h2 id="添加yun主题子模块"><a href="#添加yun主题子模块" class="headerlink" title="添加yun主题子模块"></a>添加yun主题子模块</h2><p>在高高兴兴push到github之后，你或许会发现报错<code>No url found for submodule path &#39;themes/yun&#39; in .gitmodules</code>，这是应为yun主题本身是另一个项目。想要在一个项目中添加另一个项目，就需要用到<code>git submodule</code>命令</p><pre class="language-sh" data-language="sh"><code class="language-sh">git submodule add https:&#x2F;&#x2F;github.com&#x2F;YunYouJun&#x2F;hexo-theme-yun themes&#x2F;yun#跟clone命令很像，同时会创建 .gitmodule 文件git clone -b master https:&#x2F;&#x2F;github.com&#x2F;YunYouJun&#x2F;hexo-theme-yun themes&#x2F;yun</code></pre><blockquote><p>P.S. 若提示路径已存在，则需要删除<strong>yun</strong>文件夹并运行第一条命令</p></blockquote><p>成功后你将看到：</p><pre class="language-sh" data-language="sh"><code class="language-sh">[root@VM-0-12-centos sknplz.xyz]# sh update.sh [hexo 0dbacec] :pencil: update content 2 files changed, 4 insertions(+) create mode 100644 .gitmodules create mode 160000 themes&#x2F;yunUsername for &#39;https:&#x2F;&#x2F;github.com&#39;: Sknp1006Password for &#39;https:&#x2F;&#x2F;Sknp1006@github.com&#39;: Enumerating objects: 5, done.Counting objects: 100% (5&#x2F;5), done.Delta compression using up to 2 threadsCompressing objects: 100% (3&#x2F;3), done.Writing objects: 100% (4&#x2F;4), 428 bytes | 428.00 KiB&#x2F;s, done.Total 4 (delta 1), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (1&#x2F;1), completed with 1 local object.To https:&#x2F;&#x2F;github.com&#x2F;Sknp1006&#x2F;sknplz   688587d..0dbacec  hexo -&gt; hexo</code></pre><h2 id="更新yun主题子模块"><a href="#更新yun主题子模块" class="headerlink" title="更新yun主题子模块"></a>更新yun主题子模块</h2><p>在<code>.gitmodules</code>所在路径运行以下代码：</p><pre class="language-sh" data-language="sh"><code class="language-sh">git submodule update --remote</code></pre><p>你也可以参考 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a></p><p>推送后便可直接自动部署。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在我将这篇文章添加到<strong>source/_post</strong>目录下，执行<code>update.sh</code>脚本，即可将源码保存到<code>hexo</code>分支，触发actions-gh-pages自动部署网站👉 <a href="https://sknplz.xyz/">sknplz.xyz</a> </p>]]></content>
      
      
      <categories>
          
          <category> hexo相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitmoji速查表</title>
      <link href="2021/01/11/gitmoji/"/>
      <url>2021/01/11/gitmoji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><table><thead><tr><th>Gitmoji</th><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>🎨 (调色板)</td><td><code>:art:</code></td><td>改进代码结构/代码格式</td></tr><tr><td>⚡️ (闪电)</td><td><code>:zap:</code></td><td>提升性能</td></tr><tr><td>🔥 (火焰)</td><td><code>:fire:</code></td><td>移除代码或文件</td></tr><tr><td>🐛 (bug)</td><td><code>:bug:</code></td><td>修复 bug</td></tr><tr><td>🚑 (急救车)</td><td><code>:ambulance:</code></td><td>重要补丁</td></tr><tr><td>✨ (火花)</td><td><code>:sparkles:</code></td><td>引入新功能</td></tr><tr><td>📝 (备忘录)</td><td><code>:memo:</code></td><td>撰写文档</td></tr><tr><td>🚀 (火箭)</td><td><code>:rocket:</code></td><td>部署功能</td></tr><tr><td>💄 (口红)</td><td><code>:lipstick:</code></td><td>更新 UI 和样式文件</td></tr><tr><td>🎉 (庆祝)</td><td><code>:tada:</code></td><td>初次提交</td></tr><tr><td>✅ (复选框)</td><td><code>:white_check_mark:</code></td><td>增加测试</td></tr><tr><td>🔒 (锁)</td><td><code>:lock:</code></td><td>修复安全问题</td></tr><tr><td>🍎 (苹果)</td><td><code>:apple:</code></td><td>修复 macOS 下的问题</td></tr><tr><td>🐧 (企鹅)</td><td><code>:penguin:</code></td><td>修复 Linux 下的问题</td></tr><tr><td>🏁 (旗帜)</td><td><code>:checkered_flag:</code></td><td>修复 Windows 下的问题</td></tr><tr><td>🤖 (机器人)</td><td><code>:robot:</code></td><td>修复 Android 下的问题</td></tr><tr><td>🍏 (苹果)</td><td><code>:green_apple:</code></td><td>修复 IOS下的问题</td></tr><tr><td>🔖 (书签)</td><td><code>:bookmark:</code></td><td>发行/版本标签</td></tr><tr><td>🚨 (警车灯)</td><td><code>:rotating_light:</code></td><td>移除 linter 警告</td></tr><tr><td>🚧 (施工)</td><td><code>:construction:</code></td><td>工作进行中</td></tr><tr><td>💚 (绿心)</td><td><code>:green_heart:</code></td><td>修复 CI 构建问题</td></tr><tr><td>⬇️ (下降箭头)</td><td><code>:arrow_down:</code></td><td>降级依赖</td></tr><tr><td>⬆️ (上升箭头)</td><td><code>:arrow_up:</code></td><td>升级依赖</td></tr><tr><td>📌 (图钉)</td><td><code>:pushpin:</code></td><td>依赖固定到特定版本</td></tr><tr><td>👷 (工人)</td><td><code>:construction_worker:</code></td><td>添加 CI 构建系统</td></tr><tr><td>📈 (上升趋势图)</td><td><code>:chart_with_upwards_trend:</code></td><td>添加分析或跟踪代码</td></tr><tr><td>♻️ (回收)</td><td><code>:recycle:</code></td><td>重构代码</td></tr><tr><td>🐳 (鲸鱼)</td><td><code>:whale:</code></td><td>Docker 相关工作</td></tr><tr><td>🔨 (锤子)</td><td><code>:hammer:</code></td><td>重大重构</td></tr><tr><td>➕ (加号)</td><td><code>:heavy_plus_sign:</code></td><td>增加一个依赖</td></tr><tr><td>➖ (减号)</td><td><code>:heavy_minus_sign:</code></td><td>减少一个依赖</td></tr><tr><td>🔧 (扳手)</td><td><code>:wrench:</code></td><td>修改配置文件</td></tr><tr><td>🌐 (地球)</td><td><code>:globe_with_meridians:</code></td><td>国际化与本地化</td></tr><tr><td>✏️ (铅笔)</td><td><code>:pencil2:</code></td><td>修复错别字</td></tr><tr><td>💩 (粑粑)</td><td><code>:poop:</code></td><td>编写需要改进的错误代码</td></tr><tr><td>⏪ (后退)</td><td><code>:rewind:</code></td><td>还原更改</td></tr><tr><td>🔀</td><td><code>:twisted_rightwards_arrows:</code></td><td>Merge 分支</td></tr><tr><td>📦 (包裹)</td><td><code>:package:</code></td><td>更新编译文件或Package</td></tr><tr><td>👽 (外星人)</td><td><code>:alien:</code></td><td>由于外部API的更改而更新了代码</td></tr><tr><td>🚚 (卡车)</td><td><code>:truck:</code></td><td>移动或重命名文件</td></tr><tr><td>📄 (文件)</td><td><code>:page_facing_up:</code></td><td>添加或更新 Licence</td></tr><tr><td>💥 (隆隆声)</td><td><code>:boom:</code></td><td>引入重大变化</td></tr><tr><td>🍱 (便当)</td><td><code>:bento:</code></td><td>添加或更新 Assets</td></tr><tr><td>👌(OK)</td><td><code>:ok_hand:</code></td><td>由于代码评审更改而更新代码</td></tr><tr><td>♿️ (轮椅)</td><td><code>:wheelchair:</code></td><td>提高可访问性</td></tr><tr><td>💡 (电灯泡)</td><td><code>:bulb:</code></td><td>记录源代码</td></tr><tr><td>🍻 (啤酒)</td><td><code>:beers:</code></td><td>醉醺醺地编写代码</td></tr><tr><td>💬 (发言)</td><td><code>:speech_balloon:</code></td><td>更新文本和文字</td></tr><tr><td>🗃 (文件盒)</td><td><code>:card_file_box:</code></td><td>执行与数据库相关的更改</td></tr><tr><td>🔊 (巨大声响)</td><td><code>:loud_sound:</code></td><td>添加日志</td></tr><tr><td>🔇 (静音)</td><td><code>:mute:</code></td><td>移除日志</td></tr><tr><td>👥 (轮廓半身像)</td><td><code>:busts_in_silhouette:</code></td><td>添加贡献者</td></tr><tr><td>🚸 (儿童通过)</td><td><code>:children_crossing:</code></td><td>提高用户体验/可用性</td></tr><tr><td>🏗 (房屋)</td><td><code>:building_construction:</code></td><td>使建筑变化</td></tr><tr><td>📱 (苹果手机)</td><td><code>:iphone:</code></td><td>致力于响应式设计</td></tr><tr><td>🤡 (小丑)</td><td><code>:clown_face:</code></td><td>Mock 相关</td></tr><tr><td>🥚 (彩蛋)</td><td><code>:egg:</code></td><td>加入一个复活节彩蛋</td></tr><tr><td>🙈 (非礼勿视)</td><td><code>:see_no_evil:</code></td><td>添加或更新 .gitignore 文件</td></tr><tr><td>📸 (相机)</td><td><code>:camera_flash:</code></td><td>添加或更新快照</td></tr><tr><td>⚗️ (蒸馏器)</td><td><code>:alembic:</code></td><td>尝试新事物</td></tr><tr><td>🔍 (放大镜)</td><td><code>:mag:</code></td><td>SEO 提升</td></tr><tr><td>☸️ (达摩车轮)</td><td><code>:wheel_of_dharma:</code></td><td>Kubernetes 相关工作</td></tr><tr><td>🏷 (标签)</td><td><code>:label:</code></td><td>添加或更新 types (Flow, TypeScript)</td></tr><tr><td>🌱 (种子)</td><td><code>:seedling:</code></td><td>添加或更新种子文件</td></tr><tr><td>🚩 (旗帜)</td><td><code>:triangular_flag_on_post:</code></td><td>添加、更新或删除功能标志</td></tr><tr><td>💫 (头昏眼花)</td><td><code>:dizzy:</code></td><td>添加或更新动画和转换</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP环境搭建(Rasa)</title>
      <link href="2021/01/02/build-env-for-rasa/"/>
      <url>2021/01/02/build-env-for-rasa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>虽说环境搭建算不上啥干货,但是对于本人而言，每次搭环境都要重新找配置找资源<br>过程繁琐且浪费时间,所以写篇文章记录，也就是说这篇文章其实是备忘录<br>记录使用Rasa的过程，相关项目也许会上传Github</p></blockquote><span id="more"></span><h1 id="在Windows环境下"><a href="#在Windows环境下" class="headerlink" title="在Windows环境下"></a>在Windows环境下</h1><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>系统版本：Windows 10专业版 20H2<br>Anaconda版本：3-2020.11-Windows-x86_64<br>Python版本：3.8.5<br>cuda：10.1<br>tensorflow：2.3.1（安装Rasa自带）<br>Rasa UI：3.0.3</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><blockquote><p>Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项</p></blockquote><p>国内用户请使用：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">Anaconda清华镜像源</a><br>官方网站：<a href="https://www.anaconda.com/">https://www.anaconda.com/</a> </p><h2 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h2><blockquote><p>CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台<br>总而言之，若你想使用GPU为机器学习加速，便需要安装CUDA√(相关包有pytorch、tensorflow等)</p></blockquote><p>CUDA 10.1下载链接：<a href="https://developer.nvidia.com/cuda-10.1-download-archive-base">https://developer.nvidia.com/cuda-10.1-download-archive-base</a></p><blockquote><p>安装过程偶见自动重启现象，请在安装CUDA时选择<code>自定义</code>，分别安装<code>图形驱动程序</code>与<code>CUDA</code></p></blockquote><h2 id="安装tensorflow"><a href="#安装tensorflow" class="headerlink" title="安装tensorflow"></a>安装tensorflow</h2><blockquote><p>官方文档：<a href="https://tensorflow.google.cn/">https://tensorflow.google.cn/</a> </p></blockquote><h3 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h3><ul><li><p>支持以下带有 GPU 的设备：</p><ul><li>CUDA® 架构为 3.5、3.7、5.2、6.0、6.1、7.0 或更高的 NVIDIA® GPU 卡。请参阅<a href="https://developer.nvidia.com/cuda-gpus">支持 CUDA® 的 GPU 卡列表</a> </li><li>在配备 NVIDIA® Ampere GPU（CUDA 架构 8.0）或更高版本的系统上，内核已从 PTX 经过了 JIT 编译，因此 TensorFlow 的启动时间可能需要 30 多分钟。通过使用 <code>export CUDA_CACHE_MAXSIZE=2147483648</code> 增加默认 JIT 缓存大小，即可将此系统开销限制为仅在首次启动时发生（有关详细信息，请参阅 <a href="https://devblogs.nvidia.com/cuda-pro-tip-understand-fat-binaries-jit-caching">JIT 缓存</a> ）</li><li>对于 CUDA® 架构不受支持的 GPU，或为了避免从 PTX 进行 JIT 编译，亦或是为了使用不同版本的 NVIDIA® 库，请参阅<a href="https://tensorflow.google.cn/install/source">在 Linux 下从源代码编译指南</a></li><li>软件包不包含 PTX 代码，但最新支持的 CUDA® 架构除外；因此，如果设置了 CUDA_FORCE_PTX_JIT=1，TensorFlow 将无法在旧版 GPU 上加载。（有关详细信息，请参阅<a href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#application-compatibility">应用兼容性</a> ）</li></ul><h3 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h3></li><li><p>必须在系统中安装以下 NVIDIA® 软件：</p><ul><li><a href="https://www.nvidia.com/drivers">NVIDIA® GPU 驱动程序</a> ：CUDA® 10.1 需要 418.x 或更高版本</li><li><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA® 工具包</a> ：TensorFlow 支持 CUDA® 10.1（TensorFlow 2.1.0 及更高版本）</li><li>CUDA® 工具包附带的 <a href="http://docs.nvidia.com/cuda/cupti/">CUPTI</a> </li><li><a href="https://developer.nvidia.com/cudnn">cuDNN SDK 7.6</a></li><li>（可选）<a href="https://docs.nvidia.com/deeplearning/sdk/tensorrt-install-guide/index.html">TensorRT 6.0</a> ，可缩短用某些模型进行推断的延迟时间并提高吞吐量。</li></ul></li></ul><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li>Python 3.5-3.8<ul><li>若要支持 Python 3.8，需要使用 TensorFlow 2.2 或更高版本。</li></ul></li><li>pip 19.0 或更高版本（需要 manylinux2010 支持）</li><li>Ubuntu 16.04 或更高版本（64 位）</li><li>macOS 10.12.6 (Sierra) 或更高版本（64 位）（不支持 GPU）</li><li>Windows 7 或更高版本（64 位）<ul><li><a href="https://support.microsoft.com/help/2977003/the-latest-supported-visual-c-downloads">适用于 Visual Studio 2015、2017 和 2019 的 Microsoft Visual C++ 可再发行软件包</a> </li></ul></li><li>Raspbian 9.0 或更高版本</li><li><a href="https://tensorflow.google.cn/install/gpu">GPU 支持</a> 需要使用支持 CUDA® 的显卡（适用于 Ubuntu 和 Windows）</li></ul><h3 id="通过pip安装"><a href="#通过pip安装" class="headerlink" title="通过pip安装"></a>通过pip安装</h3><pre class="language-none"><code class="language-none">pip install tensorflow</code></pre><p>安装过慢请访问 <a href="https://pypi.org/project/tensorflow/#files">pypi</a> 自行下载对应版本whl文件，例：<code>tensorflow-2.4.0-cp38-cp38-win_amd64.whl</code></p><pre class="language-none"><code class="language-none">pip install .\tensorflow-2.4.0-cp38-cp38-win_amd64.whl</code></pre><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>官方网站：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><pre class="language-none"><code class="language-none">淘宝镜像源：npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org官方源：npm config set registry http:&#x2F;&#x2F;www.npmjs.org</code></pre><h2 id="安装Rasa"><a href="#安装Rasa" class="headerlink" title="安装Rasa"></a>安装Rasa</h2><blockquote><p>Rasa 是最火的聊天机器人框架，是基于机器学习和自然语言处理技术开发的系统<br>Rasa 中文官方文档包括聊天机器人，上下文管理，多伦对话，意图识别，填槽，中文聊天机器人开发必备手册 </p></blockquote><p>中文文档：<a href="http://www.rasachatbot.com/">http://www.rasachatbot.com/</a> </p><p>Rasa 的推荐安装方式是通过pip:</p><pre class="language-none"><code class="language-none">pip install rasa-x --extra-index-url https:&#x2F;&#x2F;pypi.rasa.com&#x2F;simple</code></pre><p>解决方案：</p><ul><li><a href="https://www.pythonheidong.com/blog/article/505802/6b89827e9d0f316db511/">无法卸载 ‘ruamel-yaml’</a> </li><li>pip换源，在<code>C:\Users\SKNP\pip</code>下创建<code>pip.ini</code><pre class="language-none"><code class="language-none">[global]index-url &#x3D; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple[install]trusted-host &#x3D; mirrors.aliyun.com</code></pre></li><li><a href="https://blog.csdn.net/qq_41999081/article/details/104515513">解决tensorflow-gpu 2.1出现错误“Could not load dynamic library ‘cudart64_101.dll’</a> </li></ul><h3 id="安装spaCy"><a href="#安装spaCy" class="headerlink" title="安装spaCy"></a>安装spaCy</h3><blockquote><p>spaCy 是一个 Python 和 CPython 的 NLP 自然语言文本处理库，你也可以在这里找到想要的语言模型</p></blockquote><p>官方文档：<a href="https://spacy.io/models">https://spacy.io/models</a></p><p>你可以用以下命令安装：</p><pre class="language-none"><code class="language-none">pip install rasa[spacy]python -m spacy download en_core_web_mdpython -m spacy link en_core_web_md en</code></pre><p>命令行下载过慢时使用离线安装：<br>例：下载<a href="https://github.com/explosion/spacy-models/releases//tag/zh_core_web_md-2.3.1">中文包</a> </p><pre class="language-none"><code class="language-none">pip install zh_core_web_md-2.3.1.tar.gz</code></pre><blockquote><p>语言包路径：<code>C:\Users\YOU\anaconda3\Lib\site-packages\spacy\data</code></p></blockquote><h2 id="安装Rasa-UI"><a href="#安装Rasa-UI" class="headerlink" title="安装Rasa UI"></a>安装Rasa UI</h2><h3 id="通过npm安装"><a href="#通过npm安装" class="headerlink" title="通过npm安装"></a>通过npm安装</h3><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;paschmann&#x2F;rasa-ui.gitcd rasa-uinpm install</code></pre><p><strong>建议使用cnpm可规避大部分问题</strong><br>解决方案：</p><ul><li><a href="https://my.oschina.net/dtdths/blog/1614712">windows下electron安装node原生模块(sqlite3)–踩坑记录</a> </li><li><a href="https://www.cnblogs.com/wangyuxue/p/11218113.html">安装node-gyp</a> </li><li>若要使用 v140 生成工具进行生成，请安装 Visual Studio 2015 生成工具</li><li>RasaUI@3.0.3默认使用sqlite3@4.1.0下载失败：参考<a href="https://www.npmjs.com/package/sqlite3">sqlite3</a> </li><li>fatal error LNK1127: 库已损坏，参考：<a href="https://blog.csdn.net/qq_33826977/article/details/78645665">安装node-gyp并build——解决 “node.lib:fatal error LNK1127” 问题</a> </li></ul><hr><p><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/anime/tobecontinued.jpg" loading="lazy"> </p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> NLU </tag>
            
            <tag> 安装环境 </tag>
            
            <tag> rasa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Valine在leancloud国际版无法使用的问题</title>
      <link href="2020/09/26/valine-issue-340/"/>
      <url>2020/09/26/valine-issue-340/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>解决方法: 在 <code>yun.yml</code> 中添加如下代码</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">valine</span><span class="token punctuation">:</span>  ServerURLs = "https<span class="token punctuation">:</span>//xxxxx.api.lncldglobal.com"</code></pre><blockquote><p>xxxxx表示AppID的前8位字符</p></blockquote><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> hexo相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> valine </tag>
            
            <tag> issues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>📆一场梦</title>
      <link href="2020/09/26/daily-record-3/"/>
      <url>2020/09/26/daily-record-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>最近，作息紊乱，睡得晚起得晚，下午还要补觉，导致我除了清醒的时间基本都在做梦<br>睡不着也许是MC太好玩、也许是被RE:0🔪傻了、也许是变形兄弟完结后的意犹未尽…<br>这几天总是重复一种梦，梦里的总会出现一个熟悉的身影，朦朦胧胧却带给人暖意<br>那种熟悉的感觉，仿佛回到了学生时代，情窦初开却不敢与她交流时的悸动</p><p>鄙人初中就读于一所公立中学的重点班(自豪)，老实说小学初中阶段我的成绩都还可以<br>但是有个毛病——不到最后时刻不会拼命去学，当然现在也有，我把这种现象归因于没有目标</p><p>初中的感情是很单纯的喜欢，只要望着她就会很安心</p><p>至于为什么没能在一起，主要是怂！<br>有多怂呢？有一次摸底考试，全年级会打乱座位，监考老师是没见过的体育老师<br>由于我前一个座位的同学缺考，监考老师在发卷的时候，擅自把我的笔袋拿去压着试卷<br>我清楚的记得那是一次英语考试，整个考试过程我无时无刻不想把笔袋拿回来填答题卡<br>在坐立不安中时间来到了最后两分钟，终于是鼓起“勇气”伸手拿到2B铅笔，意料之中只考了76分<br>随后班主任(英语老师)知道了，在班里公开批评了我这种行为</p><p>插句题外话，作为一班的学生，考试的时候总是有特别关照——还是一次英语考试，设备故障导致听力模糊不清<br>根据老师的教导，即使是听力不清的情况也不能放弃<br>于是我努力答题的一幕被二班的英语老师看到，随后班主任在班里公开表扬了我的行为</p><p>还有因为有一次被老师叫到办公室做了一整节课思想工作——不要早恋<br>万万没想到一个没谈过恋爱的人会被…难道有人打小报告？<br>由于怂，班主任在教训时没有反驳，就这样一声不吭的听完“训斥”…<br>多年之后回想起初中的往事，发现了一些端倪——那其实是英语课代表的恶作剧<br>没错，是恶作剧，我不明白她给我的纸条为什么会有情书的字样，上面写着：“啦啦啦啦啦啦，我是卖报的小行家🐷”<br>出于礼貌回了一句，被别有用心的同学看到后打了小报告~~</p><p>初中对于我的意义是重大的，能遇到这些优秀的同学和英明的班主任，是我这辈子独一无二的回忆(‾◡◝)</p><hr>]]></content>
      
      
      <categories>
          
          <category> 记录生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 梦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在WSL2上使用docker</title>
      <link href="2020/09/19/docker-on-wsl2/"/>
      <url>2020/09/19/docker-on-wsl2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>最近有些想法，需要用到docker<br>正好试试Windows10的linux子系统<br>But安装过程稍有不同…</p></blockquote><blockquote><p>记录一下~</p></blockquote><span id="more"></span><h2 id="搭建docker环境"><a href="#搭建docker环境" class="headerlink" title="搭建docker环境"></a>搭建docker环境</h2><h3 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2</h3><blockquote><p><a href="https://docs.microsoft.com/zh-cn/windows/WSL/install-win10#update-to-WSL-2">适用于 Linux 的 Windows 子系统安装指南 (Windows 10)</a> </p></blockquote><h3 id="安装Docker-Desktop"><a href="#安装Docker-Desktop" class="headerlink" title="安装Docker Desktop"></a>安装Docker Desktop</h3><p>下载链接: <a href="https://www.docker.com/get-started">https://www.docker.com/get-started</a> </p><blockquote><p>勾选 <code>setting</code> -&gt; <code>General</code> -&gt; <code>Use the wsl 2 based engine</code><br>默认开启 <code>Switch to Linux Containers</code></p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程</a> </li><li>镜像加速(不同版本的Docker daemon位置略有不同) <ul><li><code>Docker Engine</code> -&gt; 添加 <code>http://f1361db2.m.daocloud.io</code> 到 <code>registry-mirrors</code></li><li>其他系统配置: <a href="https://www.daocloud.io/mirror#accelerator-doc">配置Docker镜像站</a> </li></ul></li></ul><h3 id="by-the-way"><a href="#by-the-way" class="headerlink" title="by the way"></a>by the way</h3><ul><li>此时linux与windows10 <strong>共用</strong> Docker-Desktop</li><li>linux下的 <code>var/lib/docker</code> 变更为 <code>var/lib/docker-desktop</code> 且为空</li><li>镜像保存在 <code>C:\ProgramData\DockerDesktop\vm-data\DockerDesktop.vhdx</code> </li><li><code>Version: 2.3.7.0(48173) Channel: edge</code> 版本可以更方便的管理Images</li><li>安装WSL2之后跟你的手游模拟器还有VM说再见吧😁</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 神兵利器 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> WSL2 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5使用说明</title>
      <link href="2020/09/09/python_PyQt5/"/>
      <url>2020/09/09/python_PyQt5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>用python写脚本，一到运行就low爆，作为程序怎能没有GUI？</p><p>GUI项目归档: <a href="https://github.com/Sknp1006/GUI-with-PyQt5">https://github.com/Sknp1006/GUI-with-PyQt5</a> </p><p>参考资料<a href="https://github.com/cxinping/PyQt5">《PyQt5快速开发与实战》(含配套代码)</a> </p><span id="more"></span><h2 id="PyQt5环境搭建"><a href="#PyQt5环境搭建" class="headerlink" title="PyQt5环境搭建"></a>PyQt5环境搭建</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><table><thead><tr><th>操作系统</th><th>Windows10 64bit</th></tr></thead><tbody><tr><td>Python</td><td><del>3.7.0</del> 3.8.5</td></tr><tr><td>PyQt5</td><td><del>5.15.0</del> 5.15.2</td></tr><tr><td>Eric</td><td>20.9</td></tr></tbody></table><h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><p>略</p><h3 id="安装PyQt5"><a href="#安装PyQt5" class="headerlink" title="安装PyQt5"></a>安装PyQt5</h3><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> PyQt5 -i https://pypi.douban.com/simple</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> PyQt5-tools -i https://pypi.douban.com/simple</code></pre><blockquote><p>将pyqt5-tools安装路径添加到系统的环境变量 <strong>Path</strong></p></blockquote><p>例如: <code>C:\Users\SKNP\Anaconda3\Lib\site-packages\pyqt5_tools</code></p><blockquote><p>测试是否安装成功，运行以下代码</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys <span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtWidgets app <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>widget <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>widget<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span>widget<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">"hello, pyqt5"</span><span class="token punctuation">)</span>widget<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>下载Eric 6: <a href="http://eric-ide.python-projects.org/eric-download.html">http://eric-ide.python-projects.org/eric-download.html</a> </p><p>解压并修改文件名为<code>eric6</code></p></blockquote><blockquote><p>在安装Eric 6之前，需要先安装Qsci模块</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> QScintilla -i https://pypi.douban.com/simple</code></pre><h3 id="配置Eric-6-不推荐"><a href="#配置Eric-6-不推荐" class="headerlink" title="配置Eric 6(不推荐)"></a>配置Eric 6(不推荐)</h3><pre class="language-bash" data-language="bash"><code class="language-bash">python install.py</code></pre><p>若安装过程会出现连接超时，可尝试换源，在<code>C:\Users\&#123;你的用户名&#125;\pip</code>中新建pip.ini，输入以下内容即可，类似的也可更换其他源</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[global]</span><span class="token constant">index-url</span> <span class="token attr-value"><span class="token punctuation">=</span> http://pypi.douban.com/simple</span><span class="token selector">[install]</span><span class="token constant">trusted-host</span> <span class="token attr-value"><span class="token punctuation">=</span> pypi.douban.com</span></code></pre><p>如果没有提示出错，则安装成功</p><p>安装完成后，如果eric6文件夹中没有生成eric.bat，就需要进入eric6/eric文件夹双击eric6.pyw，打开eric6</p><blockquote><p>Eric 6相关配置</p></blockquote><ul><li><p>setting-&gt;preferences-&gt;Qt-&gt;Tools Directory: pyqt5_tool安装目录</p></li><li><p>setting-&gt;preferences-&gt;Editor-&gt;Autocompletion-&gt;QScintilla-&gt;勾选show single和Use fill-up characters</p></li><li><p>setting-&gt;preferences-&gt;Editor-&gt;Autocompletion-&gt;勾选Automatic Completion Enabled</p></li><li><p>添加API并编译</p></li></ul><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/PyQt5/2020-09-10 230127.png" style="zoom:80%;" / loading="lazy"><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/PyQt5/2020-09-10 230440.png" style="zoom:80%;" / loading="lazy"><ul><li>setting-&gt;preferences-&gt;Project-&gt;Multiproject自定义workspace</li></ul><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/PyQt5/2020-09-10 231050.png" style="zoom:80%;" / loading="lazy"><ul><li>安装自动补全插件jedi</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> jedi -i https://pypi.douban.com/simple</code></pre><ul><li>为Eric 6安装jedi插件</li></ul><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/PyQt5/2020-09-10 232816.png" style="zoom: 80%;" / loading="lazy"><p>接下来找到<code>Completions,Jedi</code>安装即可，但是插件仓库一直无法连接，这个方法对我来说不太适用，可以参考接下来的配置。</p><h3 id="配置Pycharm-PyQt5-推荐"><a href="#配置Pycharm-PyQt5-推荐" class="headerlink" title="配置Pycharm+PyQt5(推荐)"></a>配置Pycharm+PyQt5(推荐)</h3><p>参考链接: </p><ul><li><a href="https://blog.csdn.net/weixin_44134722/article/details/106367308?depth_1-">pyQt designer.exe 无法打开</a> </li><li><a href="https://blog.csdn.net/tt1724369779/article/details/101434147">This application failed to start because no Qt platform plugin could be initialized.</a> </li></ul><p>最新版的designer.exe位置略有不同，参考：<code>C:\Users\SKNP\anaconda3\envs\pyqt\Lib\site-packages\qt5_applications\Qt\bin\designer.exe</code></p><p>在pycharm中添加<code>External Tools</code>：</p><ul><li>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;+</li></ul><pre class="language-none"><code class="language-none">Name: QtDesignerGroup: External ToolsProgram: C:\Users\SKNP\anaconda3\envs\pyqt\Lib\site-packages\qt5_applications\Qt\bin\designer.exeWorking directory: $FileDir$</code></pre><pre class="language-none"><code class="language-none">Name: PyUICGroup: External ToolsProgram: C:\Users\SKNP\anaconda3\envs\pyqt\Scripts\pyuic5.exeArguments: $FileName$ -o $FileParentDir$\$FileNameWithoutExtension$.pyWorking directory: $FileDir$</code></pre><pre class="language-none"><code class="language-none">Name: PyRCCGroup: External ToolsProgram: C:\Users\SKNP\anaconda3\envs\pyqt\Scripts\pyrcc5.exeArguments: $FileName$ -o$FileNameWithoutExtension$_rc.pyWorking directory: $FileDir$</code></pre><p><strong>Done!</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> python相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>📆失去的不过是青春</title>
      <link href="2020/09/09/daily-record-1/"/>
      <url>2020/09/09/daily-record-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>今年是鼠年，不知不觉已经24岁了；回顾过往，遗憾依然占绝大多数。<br>正好有了自己的主页，借此机会好好回忆有生之年发生的一些事与感悟。</p><blockquote><p>本想发发牢骚，既然是写出来给人看的，不能太消极<br>还有，我很讨厌把“正经人谁tm写日记”挂嘴边的小鬼<br>写日记没错，写出来给人看的叫微博，写出来给自己看的叫心里话，都是用来记录成长过程的方式之一</p></blockquote><span id="more"></span><p>对于我来说，人生是一场游戏，但不同于现实世界的游戏。它一命通关（默认将死亡视为通关），有些mission可以重来，有些仅有一次机会。也许在游戏中不断升级，完成更高难度的任务，从而获得无与伦比的成就感才是人生的意义呢。</p><blockquote><p>在游戏卡关的时候，学习并模仿成功者不失为一种方法</p></blockquote><hr><p>说起成长，父母是对我影响最大的人，每一个孩子都会经历两个阶段——父母是超人、父母是普通人。毕竟都是人，父母与孩子的关系仅仅是人际关系的一种，家长制作为他们那个时代的思想准则在当代家庭关系中愈显局限。<br>作为孩子，我很讨厌有人高高在上支配自己的感觉，尤其是双标行为。</p><p>家长的惯用套路：</p><ul><li>道德绑架<ul><li>我为你付出了那么多金钱和时间，你不听我的话就是不孝</li><li>你怎么可以看小说不好好学习，你对得起我吗</li><li>这一切为了你，都是需要回报的</li><li>你要按照我的想法去生活，这样才是孝顺，才不是“白眼狼”</li><li>…</li></ul></li><li>选择性无视</li><li>高高在上的姿态</li><li>驰名双标</li><li>…<br>再回到父母也是人这个层面，多多少少能理解了，我们所经历的正是他们的父母让他们经历的。<br>他们的父母催促他们早点结婚生子，正如他们现在催促我们结婚生子，但是为什么要这么做呢？<br>恐怕他们也不清楚，小的时候人们总说：“长大你就知道了”，可长大能知道的事肯定是从其他渠道知道的呀，真当人生是自动挡？<br>感谢这个时代，感谢互联网，类似的案例在知乎上都能得到解答。</li></ul><p>青春不复返，好在我还没完全丧失对未来的期待(‾◡◝)</p><hr><p>Whatever，游戏继续，之前被人抢走了手柄，现在该换我上了</p><p><strong>立个flag，文笔太差，未来看到会尴尬，skr~</strong></p>]]></content>
      
      
      <categories>
          
          <category> 记录生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 青春 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yun主题相册生成器</title>
      <link href="2020/08/12/albums_creater/"/>
      <url>2020/08/12/albums_creater/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>每次要更新相册总是很麻烦，虽然之前写了自动生成文件目录的脚本，但还是需要手动将结果粘贴进对应的md文件中。<br>所以，本着一劳永逸的原则，再写一个全自动更新相册的脚本，解放双手🙌</p></blockquote><blockquote><p>github: <a href="https://github.com/Sknp1006/GUI-with-PyQt5/tree/master/yun_tools/albums_creater">GUI-with-PyQt5/yun_tools/albums_creater/</a> </p></blockquote><span id="more"></span><details><summary>如果还不知道如何配置相册👀</summary><h2 id="yun主题の相册配置"><a href="#yun主题の相册配置" class="headerlink" title="yun主题の相册配置"></a>yun主题の相册配置</h2><h3 id="相册-albums"><a href="#相册-albums" class="headerlink" title="相册 albums"></a>相册 albums</h3><p>存在一个相册主页，放置多个相册，点击进入相册查看更多照片。</p><p>在 <code>yun.yml</code> 中开启相册功能。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">albums</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p><a href="https://www.yunyoujun.cn/albums/">相册示例</a></p><p><a href="https://github.com/YunYouJun/yunyoujun.github.io/blob/hexo/source/albums/index.md">配置示例</a></p><p>如果想要让相册显示在侧边栏中，你还需要配置一下导航 <a href="https://yun.yunyoujun.cn/guide/config.html#%E9%A1%B5%E9%9D%A2%E9%93%BE%E6%8E%A5">侧边栏 - 页面链接</a>。</p><h3 id="相册集"><a href="#相册集" class="headerlink" title="相册集"></a>相册集</h3><p>相册集是相册的导航页面，你可以在此放置多个相册。</p><p>新建相册集页面</p><pre class="language-sh" data-language="sh"><code class="language-sh">hexo new page albums</code></pre><p>进入 <code>source/albums/index.md</code>，设置 <code>type</code>，和添加相册链接、封面等。</p><ul><li><code>caption</code>: 相册标题</li><li><code>url</code>: 相册链接</li><li><code>cover</code>: 相册封面</li><li><code>desc</code>: 相册描述</li></ul><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">type</span><span class="token punctuation">:</span> albums<span class="token key atrule">albums</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">caption</span><span class="token punctuation">:</span> 夕阳西下    <span class="token key atrule">url</span><span class="token punctuation">:</span> /albums/sunset.html    <span class="token key atrule">cover</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//interactive<span class="token punctuation">-</span>examples.mdn.mozilla.net/media/examples/elephant<span class="token punctuation">-</span>660<span class="token punctuation">-</span>480.jpg    <span class="token key atrule">desc</span><span class="token punctuation">:</span> 我想起那天夕阳下的奔跑<span class="token punctuation">---</span></code></pre><h3 id="相册页"><a href="#相册页" class="headerlink" title="相册页"></a>相册页</h3><p><a href="https://www.yunyoujun.cn/albums/sunset.html">相册页示例</a></p><p>相册页，才是你真正存放照片的地方。</p><blockquote><p>使用 <a href="https://github.com/sachinchoolur/lightgallery.js/">lightgallery.js</a> 实现，仅在相册页才会加载该类库。</p></blockquote><p>新建相册页面。</p><p>你只需在上面新建好的 <code>albums</code> 文件夹中，继续创建 <code>md</code> 文件，譬如新建 <code>sunset.md</code>。</p><p>或通过命令行新建：</p><pre class="language-sh" data-language="sh"><code class="language-sh">hexo new page --path albums&#x2F;sunset &quot;夕阳&quot;</code></pre><p>进入 <code>sunset.md</code> 文件，进行修改。</p><blockquote><p>注意：这里是 <code>layout</code> 而不是 <code>type</code>。</p></blockquote><p>TIP</p><p>你还可以设置 <code>gallery_password</code> 来对相册进行加密。（记得将你的仓库设置为私有。）</p><p>没有直接命名为 <code>password</code> 以防止与 <a href="https://github.com/MikeCoder/hexo-blog-encrypt">hexo-blog-encrypt</a> 插件关键字 <code>password</code> 冲突。</p><blockquote><p>因为使用了 <a href="https://github.com/brix/crypto-js">crypto-js</a>，所以你还需要 <code>npm install crypto-js</code>。</p></blockquote><p>测试页面：<a href="https://www.yunyoujun.cn/albums/sunset.html">https://www.yunyoujun.cn/albums/sunset.html</a> 测试密码：test</p><blockquote><p>如果你发现在 <code>hexo s</code> 并开启了 PJAX 时，无法正常解密相册，不用担心，这是 Hexo 作为服务器时，对链接又重新加密了一遍，生成静态文件部署时是没有问题的。</p></blockquote><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 夕阳<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-04-18 16:27:24</span><span class="token key atrule">updated</span><span class="token punctuation">:</span> <span class="token datetime number">2020-04-18 16:27:24</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> gallery<span class="token key atrule">password</span><span class="token punctuation">:</span> test<span class="token key atrule">photos</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">caption</span><span class="token punctuation">:</span> 我    <span class="token key atrule">src</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//interactive<span class="token punctuation">-</span>examples.mdn.mozilla.net/media/examples/elephant<span class="token punctuation">-</span>660<span class="token punctuation">-</span>480.jpg    <span class="token key atrule">desc</span><span class="token punctuation">:</span> 我想起那天夕阳下的奔跑  <span class="token punctuation">-</span> <span class="token key atrule">caption</span><span class="token punctuation">:</span> 想起    <span class="token key atrule">src</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//i.picsum.photos/id/198/510/300.jpg    <span class="token key atrule">desc</span><span class="token punctuation">:</span> 那是我逝去的青春<span class="token punctuation">---</span></code></pre><blockquote><p>为什么使用相册集作为 <code>albums</code>，<code>gallery</code> 作为相册 ？ <a href="https://enviragallery.com/what-is-the-difference-between-albums-vs-galleries-in-wordpress/">What is the Difference Between Albums vs Galleries in WordPress</a></p></blockquote></details><h2 id="相册生成工具"><a href="#相册生成工具" class="headerlink" title="相册生成工具"></a>相册生成工具</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>图片的加载统一采用cdn方式，详见<a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></p></blockquote><blockquote><p>❗本工具适用无密码相册，如有设置密码，请到文章中单独开启❗</p><p>工具较简易，如有其他需求，请留言~</p></blockquote><h3 id="文件夹结构"><a href="#文件夹结构" class="headerlink" title="文件夹结构"></a>文件夹结构</h3><ul><li>Github<ul><li><a href="https://github.com/Sknp1006/cdn">cdn</a></li><li>hexo_source</li></ul></li></ul><h4 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h4><blockquote><p>将下列参数改为你的即可，</p><p>❗若已有相册，请注意文件路径不要填错，以免文件内容丢失❗</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># tree.py</span>source_path <span class="token operator">=</span> <span class="token string">r"C:\Users\SKNP\Documents\GitHub"</span>cdn_url <span class="token operator">=</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master"</span><span class="token comment"># gen_albums.py</span>albums_path <span class="token operator">=</span> <span class="token string">r"C:\Users\SKNP\Documents\GitHub\hexo_source\SKNPLZ\source\albums"</span>tree_path <span class="token operator">=</span> <span class="token string">r"C:\Users\SKNP\Documents\GitHub\cdn"</span></code></pre><h4 id="tree-py"><a href="#tree-py" class="headerlink" title="tree.py"></a>tree.py</h4><blockquote><p>生成图片目录</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> setting <span class="token keyword">import</span> cdn_url<span class="token punctuation">,</span> source_pathexclude_dir <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.git'</span><span class="token punctuation">,</span> <span class="token string">'.idea'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">]</span>exclude_file <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">,</span> <span class="token string">'py'</span><span class="token punctuation">,</span> <span class="token string">'gitignore'</span><span class="token punctuation">]</span>  <span class="token comment"># 以"."开头的文件去掉"."</span><span class="token keyword">def</span> <span class="token function">is_not_txt</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sp <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> sp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> exclude_file<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>file_list<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'&amp;'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>file_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'albums'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;.txt'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> img <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>                caption <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                src <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>cdn_url<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> caption<span class="token punctuation">]</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token string">"  - caption: "</span> <span class="token operator">+</span> caption <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token string">"    src: "</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'ordinary'</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;.txt'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> img <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>                caption <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                src <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>cdn_url<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> caption<span class="token punctuation">]</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>src <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'likes'</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">tree</span><span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> Path<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> Path<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>source_path<span class="token punctuation">,</span> dir_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'"&#123;&#125;" not exist'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>    path_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">dir</span> <span class="token keyword">for</span> <span class="token builtin">dir</span> <span class="token keyword">in</span> path<span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">dir</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    file_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">dir</span> <span class="token keyword">for</span> <span class="token builtin">dir</span> <span class="token keyword">in</span> path<span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">dir</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> is_not_txt<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> path_list<span class="token punctuation">:</span>        <span class="token keyword">for</span> path <span class="token keyword">in</span> path_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> path<span class="token punctuation">.</span>name <span class="token keyword">not</span> <span class="token keyword">in</span> exclude_dir<span class="token punctuation">:</span>                <span class="token comment"># print("path:", path)</span>                <span class="token comment"># print("dir_name:", dir_name)</span>                tree<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> file_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'albums'</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>file_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            write<span class="token punctuation">(</span>file_list<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token string">'albums'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            write<span class="token punctuation">(</span>file_list<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token string">'ordinary'</span><span class="token punctuation">)</span></code></pre><p>albums类的生成结果: </p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">示例：albums&amp;arknights.txt  <span class="token list punctuation">-</span> caption: Amiya_1.jpg    src: https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/albums/arknights/Amiya_1.jpg  <span class="token list punctuation">-</span> caption: Amiya_2.jpg    src: https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/albums/arknights/Amiya_2.jpg</code></pre><p>普通相册生成结果: </p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">示例：img&amp;bg.txthttps://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/bg/bg_0_babel.pnghttps://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/bg/bg_0_babel2.png</code></pre><h4 id="gen-albums-py"><a href="#gen-albums-py" class="headerlink" title="gen_albums.py"></a>gen_albums.py</h4><blockquote><p>修改对应相册的md文件</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> glob<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> tree <span class="token keyword">import</span> tree<span class="token keyword">from</span> setting <span class="token keyword">import</span> cdn_path<span class="token punctuation">,</span> albums_path<span class="token keyword">def</span> <span class="token function">create_albums</span><span class="token punctuation">(</span>albums_dict<span class="token punctuation">,</span> album<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                  cover<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/Sknp1006/cdn/img/avatar/none.jpg"</span><span class="token punctuation">,</span> desc<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 创建新相册</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"creating &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">)</span>    md <span class="token operator">=</span> <span class="token string">"\\"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>albums_path<span class="token punctuation">,</span> <span class="token string">"&#123;&#125;.md"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 新建的md文件路径</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'---\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> title<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'title: &#123;&#125;\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'title: &#123;&#125;\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'date: &#123;&#125;\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'layout: gallery\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> passwd<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'password: &#123;&#125;\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 设置密码</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'photos:\n'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>albums_dict<span class="token punctuation">[</span>album<span class="token punctuation">]</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'---\n'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>albums_path<span class="token punctuation">,</span> <span class="token string">'index.md'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># 读取原来的index.md</span>        txt <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>albums_path<span class="token punctuation">,</span> <span class="token string">'index.md'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># 在index.md添加新album</span>        f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'  - caption: &#123;&#125;\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'    url: /albums/&#123;&#125;.html\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'    cover: &#123;&#125;\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cover<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'    desc: &#123;&#125;\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'---\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">update_albums</span><span class="token punctuation">(</span>albums_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 更新相册</span>    <span class="token keyword">for</span> album <span class="token keyword">in</span> albums_dict<span class="token punctuation">:</span>        md <span class="token operator">=</span> <span class="token string">"\\"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>albums_path<span class="token punctuation">,</span> <span class="token string">"&#123;&#125;.md"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 对应album的md文件</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> Path<span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 找不到，则新建一个相册</span>            cover <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>albums_dict<span class="token punctuation">[</span>album<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 随机选取封面</span>            create_albums<span class="token punctuation">(</span>albums_dict<span class="token punctuation">,</span> album<span class="token punctuation">,</span> cover<span class="token operator">=</span>cover<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'---\n'</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'title: &#123;&#125;\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'date: &#123;&#125;\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'layout: gallery\n'</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'photos:\n'</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>albums_dict<span class="token punctuation">[</span>album<span class="token punctuation">]</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'---\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; updated done!"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_txt</span><span class="token punctuation">(</span>tree_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    albums_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    txt_list <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>tree_path <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> <span class="token string">"*.txt"</span><span class="token punctuation">)</span>    albums_txt <span class="token operator">=</span> <span class="token punctuation">[</span>txt <span class="token keyword">for</span> txt <span class="token keyword">in</span> txt_list <span class="token keyword">if</span> txt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"albums"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> albums_txt<span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            albums_dict<span class="token punctuation">[</span><span class="token builtin">file</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> albums_dict<span class="token keyword">def</span> <span class="token function">update_tree</span><span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    tree<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"update done"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    update_tree<span class="token punctuation">(</span><span class="token string">'img/albums'</span><span class="token punctuation">)</span>    <span class="token builtin">dict</span> <span class="token operator">=</span> read_txt<span class="token punctuation">(</span>cdn_path<span class="token punctuation">)</span>    update_albums<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span></code></pre><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul><li>当前不支持设置密码，请在文章内手动开启</li><li>新相册部分参数请到index.md修改<ul><li><code>caption</code>: 默认为空</li><li><code>url</code>: 默认为<code>/albums/[相册文件名].html</code></li><li><code>cover</code>: 该相册下随机选取的一张图片</li><li><code>desc</code>: 默认为空</li></ul></li></ul><p>运行过程: </p><ul><li><code>update_tree(&#39;img/albums&#39;)</code>: 扫描albums文件夹，将最新文件配置写入记事本</li><li><code>dict = read_txt(cdn_path)</code>: 读取txt文件的配置，结果存入字典</li><li><code>update_albums(dict)</code>: 根据albums字典修改对应md，如有新相册则添加进index.md</li></ul><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>albums&amp;test.txt</p><pre class="language-none"><code class="language-none">- caption: Amiya_1.jpg  src: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Sknp1006&#x2F;cdn@master&#x2F;img&#x2F;albums&#x2F;test&#x2F;Amiya_1.jpg- caption: Amiya_2.jpg  src: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Sknp1006&#x2F;cdn@master&#x2F;img&#x2F;albums&#x2F;test&#x2F;Amiya_2.jpg- caption: Angelina_1.jpg  src: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Sknp1006&#x2F;cdn@master&#x2F;img&#x2F;albums&#x2F;test&#x2F;Angelina_1.jpg- caption: Ansel_1.jpg  src: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Sknp1006&#x2F;cdn@master&#x2F;img&#x2F;albums&#x2F;test&#x2F;Ansel_1.jpg</code></pre><p>index.md</p><pre class="language-none"><code class="language-none">---type: albumscomments: falsealbums:    - caption: None    url: &#x2F;albums&#x2F;test.html    cover: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Sknp1006&#x2F;cdn@master&#x2F;img&#x2F;albums&#x2F;test&#x2F;Amiya_1.jpg    desc: None---</code></pre><p>test.md</p><pre class="language-none"><code class="language-none">---title: testdate: 2020-08-12 23:44:02layout: galleryphotos:  - caption: Amiya_1.jpg    src: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Sknp1006&#x2F;cdn@master&#x2F;img&#x2F;albums&#x2F;test&#x2F;Amiya_1.jpg  - caption: Amiya_2.jpg    src: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Sknp1006&#x2F;cdn@master&#x2F;img&#x2F;albums&#x2F;test&#x2F;Amiya_2.jpg  - caption: Angelina_1.jpg    src: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Sknp1006&#x2F;cdn@master&#x2F;img&#x2F;albums&#x2F;test&#x2F;Angelina_1.jpg  - caption: Ansel_1.jpg    src: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Sknp1006&#x2F;cdn@master&#x2F;img&#x2F;albums&#x2F;test&#x2F;Ansel_1.jpg---</code></pre><h2 id="GUI版本"><a href="#GUI版本" class="headerlink" title="GUI版本"></a>GUI版本</h2><blockquote><p>船新版本，操作便捷</p></blockquote><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/PyQt5/2020-09-16 235231.png" style="zoom:80%;" / loading="lazy"><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><blockquote><p>2020/8/12 可以自动生成文件目录，自动更新md<br>2020/9/16 船新GUI版本</p></blockquote><hr><p><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/anime/tobecontinued.jpg" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> hexo主题相关 </category>
          
          <category> 自制工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> yun </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-tag-aplayer</title>
      <link href="2020/08/07/hexo-tag-aplayer/"/>
      <url>2020/08/07/hexo-tag-aplayer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p><code>APlayer</code>播放器的 Hexo 标签插件（现已支持 <code>MetingJS</code>）。</p></blockquote><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-none"><code class="language-none">npm install --save hexo-tag-aplayer</code></pre><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li>APlayer.js &gt; 1.8.0</li><li>Meting.js &gt; 1.1.1</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="language-none"><code class="language-none">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</code></pre><h3 id="标签参数"><a href="#标签参数" class="headerlink" title="标签参数"></a>标签参数</h3><ul><li><code>title</code> : 曲目标题</li><li><code>author</code>: 曲目作者</li><li><code>url</code>: 音乐文件 URL 地址</li><li><code>picture_url</code>: (可选) 音乐对应的图片地址</li><li><code>narrow</code>: （可选）播放器袖珍风格</li><li><code>autoplay</code>: (可选) 自动播放，移动端浏览器暂时不支持此功能</li><li><code>width:xxx</code>: (可选) 播放器宽度 (默认: 100%)</li><li><code>lrc:xxx</code>: （可选）歌词文件 URL 地址</li></ul><p>当开启 Hexo 的 <a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">文章资源文件夹</a> 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：</p><pre class="language-none"><code class="language-none">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</code></pre><h3 id="歌词标签"><a href="#歌词标签" class="headerlink" title="歌词标签"></a>歌词标签</h3><p>除了使用标签 <code>lrc</code> 选项来设定歌词，你也可以直接使用 <code>aplayerlrc</code> 标签来直接插入歌词文本在博客中：</p><pre class="language-none"><code class="language-none">&#123;% aplayerlrc &quot;title&quot; &quot;author&quot; &quot;url&quot; &quot;autoplay&quot; %&#125;[00:00.00]lrc here&#123;% endaplayerlrc %&#125;</code></pre><h3 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h3><pre class="language-none"><code class="language-none">&#123;% aplayerlist %&#125;&#123;    &quot;narrow&quot;: false,                          &#x2F;&#x2F; （可选）播放器袖珍风格    &quot;autoplay&quot;: true,                         &#x2F;&#x2F; （可选) 自动播放，移动端浏览器暂时不支持此功能    &quot;mode&quot;: &quot;random&quot;,                         &#x2F;&#x2F; （可选）曲目循环类型，有 &#39;random&#39;（随机播放）, &#39;single&#39; (单曲播放), &#39;circulation&#39; (循环播放), &#39;order&#39; (列表播放)， 默认：&#39;circulation&#39;     &quot;showlrc&quot;: 3,                             &#x2F;&#x2F; （可选）歌词显示配置项，可选项有：1,2,3    &quot;mutex&quot;: true,                            &#x2F;&#x2F; （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停    &quot;theme&quot;: &quot;#e6d0b2&quot;,                      &#x2F;&#x2F; （可选）播放器风格色彩设置，默认：#b7daff    &quot;preload&quot;: &quot;metadata&quot;,                    &#x2F;&#x2F; （可选）音乐文件预载入模式，可选项： &#39;none&#39; &#39;metadata&#39; &#39;auto&#39;, 默认: &#39;auto&#39;    &quot;listmaxheight&quot;: &quot;513px&quot;,                 &#x2F;&#x2F; (可选) 该播放列表的最大长度    &quot;music&quot;: [        &#123;            &quot;title&quot;: &quot;CoCo&quot;,            &quot;author&quot;: &quot;Jeff Williams&quot;,            &quot;url&quot;: &quot;caffeine.mp3&quot;,            &quot;pic&quot;: &quot;caffeine.jpeg&quot;,            &quot;lrc&quot;: &quot;caffeine.txt&quot;        &#125;,        &#123;            &quot;title&quot;: &quot;アイロニ&quot;,            &quot;author&quot;: &quot;鹿乃&quot;,            &quot;url&quot;: &quot;irony.mp3&quot;,            &quot;pic&quot;: &quot;irony.jpg&quot;        &#125;    ]&#125;&#123;% endaplayerlist %&#125;</code></pre><h3 id="👍MeingJS（强推！）"><a href="#👍MeingJS（强推！）" class="headerlink" title="👍MeingJS（强推！）"></a>👍MeingJS（强推！）</h3><p><a href="https://github.com/metowolf/MetingJS">MetingJS</a> 是基于<a href="https://github.com/metowolf/Meting">Meting API</a> 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 <code>_config.yml</code> 中设置：</p><pre class="language-none"><code class="language-none">aplayer:  meting: true</code></pre><p>接着就可以通过 <code>&#123;% meting ...%&#125;</code> 在文章中使用 MetingJS 播放器了：</p><pre class="language-none"><code class="language-none">&lt;!-- 简单示例 (id, server, type)  --&gt;&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;&lt;!-- 进阶示例 --&gt;&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</code></pre><p>有关 <code>&#123;% meting %&#125;</code> 的选项列表如下:</p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table><p>关于如何设置自建的 Meting API 服务器地址，以及其他 MetingJS 配置，请参考章节<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE30-%E6%96%B0%E5%8A%9F%E8%83%BD">自定义配置</a></p><h3 id="PJAX-兼容"><a href="#PJAX-兼容" class="headerlink" title="PJAX 兼容"></a>PJAX 兼容</h3><p>若在 Hexo 中使用了 PJAX，可能需要自己手动清理 APlayer 全局实例：</p><pre class="language-none"><code class="language-none">$(document).on(&#39;pjax:start&#39;, function () &#123;    if (window.aplayers) &#123;        for (let i &#x3D; 0; i &lt; window.aplayers.length; i++) &#123;            window.aplayers[i].destroy();        &#125;        window.aplayers &#x3D; [];    &#125;&#125;);</code></pre><h2 id="自定义配置（3-0-新功能）"><a href="#自定义配置（3-0-新功能）" class="headerlink" title="自定义配置（3.0 新功能）"></a>自定义配置（3.0 新功能）</h2><p>现在你可以在 Hexo 配置文件 <code>_config.yml</code> 中配置本插件：</p><pre class="language-none"><code class="language-none">aplayer:  script_dir: some&#x2F;place                        # Public 目录下脚本目录路径，默认: &#39;assets&#x2F;js&#39;  style_dir: some&#x2F;place                         # Public 目录下样式目录路径，默认: &#39;assets&#x2F;css&#39;  cdn: http:&#x2F;&#x2F;xxx&#x2F;aplayer.min.js                # 引用 APlayer.js 外部 CDN 地址 (默认不开启)  style_cdn: http:&#x2F;&#x2F;xxx&#x2F;aplayer.min.css         # 引用 APlayer.css 外部 CDN 地址 (默认不开启)  meting: true                                  # MetingJS 支持  meting_api: http:&#x2F;&#x2F;xxx&#x2F;api.php                # 自定义 Meting API 地址  meting_cdn: http:&#x2F;&#x2F;xxx&#x2F;Meing.min.js           # 引用 Meting.js 外部 CDN 地址 (默认不开启)  asset_inject: true                            # 自动插入 Aplayer.js 与 Meting.js 资源脚本, 默认开启  externalLink: http:&#x2F;&#x2F;xxx&#x2F;aplayer.min.js       # 老版本参数，功能与参数 cdn 相同</code></pre><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><h3 id="标签参数空格问题"><a href="#标签参数空格问题" class="headerlink" title="标签参数空格问题"></a>标签参数空格问题</h3><p>在 Hexo 标签中，用户可能无法直接在标签参数中<a href="https://github.com/hexojs/hexo/issues/1455">加入空格</a></p><p>如果遇到这类问题，请直接将参数用双引号括起来使用，如下所示：</p><pre class="language-none"><code class="language-none">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;autoplay&quot; &quot;width:70%&quot; &quot;lrc:caffeine.txt&quot; %&#125;</code></pre><h3 id="重复载入-Aplayer-js-资源脚本问题"><a href="#重复载入-Aplayer-js-资源脚本问题" class="headerlink" title="重复载入 Aplayer.js 资源脚本问题"></a>重复载入 Aplayer.js 资源脚本问题</h3><p>本插件通过 <code>after_render:html</code>过滤器 , 将 <code>APlayer.js</code> 和 <code>Meting.js</code> 插入到使用了本插件标签 的 HTML 文件中:</p><pre class="language-none"><code class="language-none">&lt;html&gt;  &lt;head&gt;    ...    &lt;script src&#x3D;&quot;assets&#x2F;js&#x2F;aplayer.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;assets&#x2F;js&#x2F;meting.min.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;&#x2F;head&gt;  ...&lt;&#x2F;html&gt;</code></pre><p>但是 <code>after_render:html</code> 在一些情形下可能无法被正常触发:</p><ul><li><a href="https://github.com/hexojs/hexo-inject/issues/1">Does not work with hexo-renderer-jade</a></li><li><code>after_render:html</code> 似乎在 Hexo 服务器模式默认配置中无法被调用 (<code>hexo server</code>), 遇到这种情况用户可能需要使用 <code>hexo-server</code> 的静态文件解析模式 ( <code>hexo server -s</code>) .</li></ul><p>如果在博客生成过程中，插件发现 <code>after_render:html</code> 没有被调用，那么插件将会通过 <code>after_post_render</code> 过滤器来植入脚本。但是使用 <code>after_post_render</code> 会有重复载入 <code>APlayer.js</code> 的情况（例如当一个页面中存在多篇博客时），以及一些非文章页面将无法使用本插件。</p><p>如果想完全解决这个问题，用户可能需要自己在主题文件中手动加入 <code>Aplayer.js</code> 与 <code>Meting.js</code>，同时关闭插件的自动脚本插入功能：</p><pre class="language-none"><code class="language-none">aplayer:  asset_inject: false</code></pre><h2 id="我的示例"><a href="#我的示例" class="headerlink" title="我的示例"></a>我的示例</h2><p>原文：</p><pre class="language-none"><code class="language-none">&#123;% meting &quot;44856356&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</code></pre><p>效果（Hanser的歌）：</p>    <div id="aplayer-zyTVzmlY" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="5228962805" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div>]]></content>
      
      
      <categories>
          
          <category> hexo主题相关 </category>
          
          <category> 官方插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-filter-file-link</title>
      <link href="2020/08/06/hexo-filter-file-link/"/>
      <url>2020/08/06/hexo-filter-file-link/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>一个插件，可方便地以markdown样式链接本地发布的文件</p></blockquote><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>cd到hexo root</p><pre class="language-none"><code class="language-none">npm install hexo-filter-file-link --save</code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这是您的帖子文件：</p><pre class="language-none"><code class="language-none">- sources  |- _post      |- a.md      |- c.md</code></pre><p>然后你想在<code>a.md</code>中链接<code>c.md</code></p><p>这是 <code>a.md</code>的内容：</p><pre class="language-none"><code class="language-none">blublublue, this is page [C](file:&#x2F;&#x2F;c.md)</code></pre><p>在经过<code>hexo-filter-file-link</code>的处理后，<code>a.md</code>会被翻译成如下代码：</p><pre class="language-none"><code class="language-none">blublublue, this is page [C](http:&#x2F;&#x2F;yoursite.com&#x2F;c)</code></pre><p>这是在<code>before_post_render</code>事件期间捕获的真实网址(‾◡◝)</p><h2 id="我的示例"><a href="#我的示例" class="headerlink" title="我的示例"></a>我的示例</h2><pre class="language-none"><code class="language-none">原文：[【C数据结构】一些准备工作](file:&#x2F;&#x2F;C_Structure.md)</code></pre><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">【C数据结构】一些准备工作</span>](<span class="token url">file://C_Structure.md</span>)</span> </code></pre><p><strong>注意</strong>：在每次<code>hexo g</code>之前都应先执行<code>hexo clean</code></p>]]></content>
      
      
      <categories>
          
          <category> hexo主题相关 </category>
          
          <category> 官方插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyinstaller使用教程</title>
      <link href="2020/08/03/python_pyinstaller/"/>
      <url>2020/08/03/python_pyinstaller/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>就在今天，我突然想用python编写一个明日方舟apk自动解包的程序。既然要解包，首先要下载包，众所周知在windows上运行py文件是不如直接运行exe方便的。这时就需要pyinstaller将py转换成exe。下面是本人在实际使用过程中的一些心得与踩坑，也欢迎大家留言交流。</p><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/albums/arknights_bg/007.png" alt="Arknights" style="zoom:67%;" / loading="lazy"><span id="more"></span><h2 id="什么是pyinstaller"><a href="#什么是pyinstaller" class="headerlink" title="什么是pyinstaller?"></a>什么是pyinstaller?</h2><p>简单的说，它是一个能将你编写的py项目打包成可执行文件的python第三方模块~</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="使用pipenv"><a href="#使用pipenv" class="headerlink" title="使用pipenv"></a>使用pipenv</h3><p>[*]  如果在原生环境中使用pyinstaller，可能会造出一个巨大的文件。这是因为原生环境还包含你所安装的其他模块，这些模块未必在你的项目中所使用，但是pyinstaller可没有人那么智能，它会一股脑给你全打包带走，十分贴心（雾）</p><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/pyinstaller/2020-08-03 225037.png" alt=""  / loading="lazy"><p>就拿download.py为例，源文件才4KB，硬生生给我干到了268MB，其效率之低，可想而知。</p><p>Pipenv 是一款管理虚拟环境的命令行软件，简单来讲，它可以创建一个只在某个目录下的局部 Python 环境，而这个环境是可以和全局环境脱离开的。</p><p>步骤如下:</p><ol><li>安装 Pipenv</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pipenv</code></pre><ol start="2"><li>选一个好目录做我们的虚拟环境，然后在该目录下:</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">pipenv <span class="token function">install</span> --python <span class="token number">3.7</span></code></pre><p>这样就可以在目录下创建一个局部的环境了，我这里设为 3.7 是因为我自己用的是 3.7，具体设什么根据自己的情况来定。</p><ol start="3"><li>在命令行下激活环境</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">pipenv shell</code></pre><p>输入这个命令，我们就进入到了新建的虚拟环境。如果你这时候使用命令 <code>pip list</code> 并发现里面只有很少的库，这就说明我们成功进入虚拟环境了（有点像 Conda）。</p><ol start="4"><li>安装依赖的库</li></ol><p>在虚拟环境下安装 Pyinstaller 和你自己的脚本依赖的第三方库，比如我的就是：</p><pre class="language-bash" data-language="bash"><code class="language-bash">pipenv <span class="token function">install</span> pyinstallerpipenv <span class="token function">install</span> <span class="token assign-left variable">setuptools</span><span class="token operator">==</span><span class="token number">44.0</span>.0  <span class="token comment">#避免使用最新</span>pipenv <span class="token function">install</span> urllib3pipenv <span class="token function">install</span> tqdm</code></pre><p>再次查看 <code>pip list</code> 时，如果都成功安装好了，我们就可以开始打包了。</p><ol start="5"><li>进入你的项目目录，运行pyinstaller即可。</li></ol><p>使用pipenv后的对比:</p><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/pyinstaller/2020-08-03 230608.png"   alt="" / loading="lazy"><p>😀</p><h2 id="使用pyinstaller打包单个文件"><a href="#使用pyinstaller打包单个文件" class="headerlink" title="使用pyinstaller打包单个文件"></a>使用pyinstaller打包单个文件</h2><p>用上面的方法创建好打包环境后，现在可以开始打包你的py文件啦~</p><ul><li> Pyinstaller 用法很简单，在对应的主调 py 文件的目录下，运行:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">pyinstaller <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">></span><span class="token punctuation">]</span> Target.py</code></pre><p>介绍一下 Pyinstaller 常用的参数用法:</p><ul><li><code>--distpath </code>: 打包到哪个目录下</li><li><code>-w</code>: 指定生成 GUI 软件，也就是运行时不打开控制台</li><li><code>-c</code>: 运行时打开控制台</li><li><code>-i </code>: 指定打包后可执行文件的图标</li><li><code>--clean</code>: 在构建之前清理PyInstaller缓存并删除临时文件</li></ul><p>关于打包成什么样，有两种选择：</p><ul><li><code>-D</code>: 创建包含可执行文件的单文件夹包，同时会有一大堆依赖的 dll 文件，这是默认选项</li><li><code>-F</code>: 只生成一个 .exe 文件，如果项目比较小的话可以用这个，但比较大的话就不推荐</li></ul><p>最后来看看我使用的参数:</p><pre class="language-bash" data-language="bash"><code class="language-bash">pyinstaller -F -i A.ico download.py</code></pre><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/pyinstaller/2020-08-03 231820.png"   alt="" / loading="lazy"><p>若不指定distpath，则默认将exe文件保存在dist目录。</p><p><strong>更多的用法可以自行百度</strong></p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h3 id="生成的exe文件过大"><a href="#生成的exe文件过大" class="headerlink" title="生成的exe文件过大"></a>生成的exe文件过大</h3><ul><li>上文已经说过，使用pipenv即可解决。</li></ul><h3 id="生成的exe文件无法运行"><a href="#生成的exe文件无法运行" class="headerlink" title="生成的exe文件无法运行"></a>生成的exe文件无法运行</h3><blockquote><p>这个问题比较特殊，这里讲讲我遇到的错</p></blockquote><ol><li><p>能正常生成exe</p> <img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/pyinstaller/2020-08-03 205632.png"   alt="" / loading="lazy">  如图所示，提示缺少模组，这里有两个思路:  * 成功生成exe文件时，也会生成已**.spec**为后缀的文件，这是用来指示pyinstaller如何打包的文件，在`hiddenimports`中添加需要忽略的包（注意引号），如下所示：      <img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/pyinstaller/2020-08-03 232850.png"   alt=""/ loading="lazy">      再次尝试运行pyinstaller，若提示其他缺少的包，依次添加。  * 根据网络上的资料，造成这种兼容性问题的原因是`setuptools`的版本过高，建议使用`44.0.0`版本，至于安装，想必不用再说了吧。总之推荐这种方法，前提是降级setuptools不会对你现有的程序造成错误。 * 某天发现生成的exe又过大，这时请检查你的虚拟环境是否缺少包。在我的实践中发现，虚拟环境的包会在某些条件下变为最开始的状态。</li><li><p>不能正常生成exe</p></li></ol><blockquote><p>多半是源程序不合规范</p></blockquote><p>标准格式要包含如下内容:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>download.py示例:</p><blockquote><p>tips: 想让tqdm在同一行显示，需要注意<code>ncols=80</code>参数和<code>miniters=0</code>，前者是行宽，后者是刷新频率</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">as</span> ur<span class="token keyword">import</span> tqdm<span class="token comment"># 进度条类</span><span class="token keyword">class</span> <span class="token class-name">TqdmUpTo</span><span class="token punctuation">(</span>tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Provides `update_to(n)` which uses `tqdm.update(delta_n)`.</span>    last_block <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">update_to</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block_num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> block_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> total_size<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> total_size <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>total <span class="token operator">=</span> total_size        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span>block_num <span class="token operator">-</span> self<span class="token punctuation">.</span>last_block<span class="token punctuation">)</span> <span class="token operator">*</span> block_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_block <span class="token operator">=</span> block_num<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    link <span class="token operator">=</span> <span class="token string">"https://ak.hypergryph.com/downloads/android_lastest"</span>    local <span class="token operator">=</span> <span class="token string">'Arknights.zip'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> TqdmUpTo<span class="token punctuation">(</span>unit<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">,</span> unit_scale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> unit_divisor<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span> miniters<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> desc<span class="token operator">=</span><span class="token string">"Arknights"</span><span class="token punctuation">,</span>                      dynamic_ncols<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>  <span class="token comment"># 继承至tqdm父类的初始化参数</span>            ur<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>link<span class="token punctuation">,</span> filename<span class="token operator">=</span>local<span class="token punctuation">,</span> reporthook<span class="token operator">=</span>t<span class="token punctuation">.</span>update_to<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"按任意键继续..."</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span>    t<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pyinstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【明日方舟】明日方舟解包教程——咕咕咕ing</title>
      <link href="2020/08/03/Arknights_extract/"/>
      <url>2020/08/03/Arknights_extract/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/Arknights_extract/unity_static_splash.png"   alt=""/ loading="lazy"><span id="more"></span>    <div id="aplayer-NLsqHUwm" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="5027081935" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><blockquote><p>尽可能的使解包过程自动化且智能化</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本教程纯粹兴趣使然，请勿用于其他奇怪的地方，请勿在公开场合讨论解包内容，谢谢合作🙂</p></blockquote><blockquote><p>系统要求：windows7及以上，暂不支持MAC与Linux</p><p>Github: <a href="https://github.com/Sknp1006/Arknights">https://github.com/Sknp1006/Arknights</a></p></blockquote><blockquote><p>配合BGM食用效果更佳</p></blockquote><h2 id="明日方舟解包概述"><a href="#明日方舟解包概述" class="headerlink" title="明日方舟解包概述"></a>明日方舟解包概述</h2><h3 id="目录概述"><a href="#目录概述" class="headerlink" title="目录概述"></a>目录概述</h3><ul><li><code>assets</code>: 存放游戏相关资源文件(.ab后缀)</li><li><code>lib</code>: 存放链接文件(.so后缀)</li><li><code>res</code>: 存放app图标、布局、描述等文件</li></ul><h4 id="assets-AB-Android目录结构"><a href="#assets-AB-Android目录结构" class="headerlink" title="assets\AB\Android目录结构"></a>assets\AB\Android目录结构</h4><blockquote><p>游戏资源都在该目录下</p></blockquote><ul><li><code>activity</code>: 主要是活动LOGO及布局UI图标等</li><li><code>arts</code>🔥: 几乎涵盖所有主界面LOGO，包括主界面、干员头像、精英、家具、敌人头像、信物、皮肤、芯片、材料、帮助、商店、地图</li><li><code>audio</code>: 游戏音乐资源</li><li><code>battle</code>: 与作战界面有关的贴图</li><li><code>building</code>: 基建贴图</li><li><code>charpack</code>🔥: Texture2D干员立绘</li><li><code>crisisseasons</code>: 危机合约贴图</li><li><code>gamedata</code>: 剧情对话</li><li><code>i18n</code>: 剧情外的提示文本(“[BUILDING_BUY_LABOR_NO_AP]理智不足，无法进行急速充能”)</li><li><code>npcpack</code>: npc资源包(博士，凯尔希，龙门高层等)</li><li><code>prefabs</code>: 商店开包资源(包含可露希尔立绘)</li><li><code>scenes</code>: Texture2D场景贴图</li><li><code>spritepack</code>: 情报收集室、干员专精图标、干员皮肤全图、剧情封面贴图</li><li><code>ui</code>: 活动关卡地图、剿灭作战地图、主线地图、资源地图、教学图、章节图、寻访图、商店促销预览图</li></ul><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="AssetStudio"><a href="#AssetStudio" class="headerlink" title="AssetStudio"></a>AssetStudio</h3><blockquote><p>AssetStudio is a tool for exploring, extracting and exporting assets and assetbundles.<br>链接: <a href="https://github.com/Perfare/AssetStudio">https://github.com/Perfare/AssetStudio</a><br>博客: <a href="https://www.perfare.net/">https://www.perfare.net/</a></p></blockquote><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><ul><li><a href="https://dotnet.microsoft.com/download/dotnet-framework/net472">.NET Framework 4.7.2</a></li><li><a href="https://support.microsoft.com/help/2977003/the-latest-supported-visual-c-downloads">Microsoft Visual C++ 2017 Redistributable</a></li></ul><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>Visual Studio 2019 or newer<br>AssetStudioFBX uses <a href="https://www.autodesk.com/developer-network/platform-technologies/fbx-sdk-2020-1-1">FBX SDK 2020.0.1 VS2017</a> , before building, you need to install the FBX SDK and modify the project file, change include directory and library directory to point to the FBX SDK directory<br>If you want to change the FBX SDK version, you need to replace libfbxsdk.dll which in AssetStudioGUI/Libraries/x86/ and AssetStudioGUI/Libraries/x64/ directory to the new version</p><blockquote><p>这里演示x64编译方式，FBX SDK默认安装在C盘，请根据实际情况进行更改</p></blockquote><ul><li>将<code>FBX SDK</code>添加<code>include directory</code>(包含目录)和<code>library directory</code>(库目录)</li></ul><ol><li>找到解决方案管理器，右键<code>AssetStudioFBXNative</code>-&gt;<code>属性</code>，找到<code>包含目录</code>与<code>库目录</code></li></ol><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/Arknights_extract/2020-08-08 133533.png" style="zoom: 80%;"  alt=""/ loading="lazy"><ol start="2"><li>添加<code>C:\Program Files\Autodesk\FBX\FBX SDK\2020.1.1\include</code>路径到<code>包含目录</code></li></ol><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/Arknights_extract/2020-08-08 133552.png" style="zoom:80%;"  alt=""/ loading="lazy"><ol start="3"><li>添加<code>C:\Program Files\Autodesk\FBX\FBX SDK\2020.1.1\lib\vs2017\x64\release</code>到<code>库目录</code></li></ol><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/Arknights_extract/2020-08-08 133613.png" style="zoom:80%;"  alt=""/ loading="lazy"><ol start="4"><li>设置编译参数<code>Release</code> <code>x64</code>，点击<code>本地Windows调试器</code>，按提示完成调试</li></ol><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/Arknights_extract/2020-08-08 134803.png"   alt=""/ loading="lazy"><ol start="5"><li>找到你所编译的程序目录<code>C:\Users\SKNP\Downloads\AssetStudio-0.15.0\AssetStudioGUI\bin\Release</code></li></ol><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/Arknights_extract/2020-08-08 135201.png"   alt=""/ loading="lazy"><ol start="6"><li>至此已完成程序编译，双击<code>AssetStudioGUI.exe</code>开始使用吧(*￣3￣)╭</li></ol><h4 id="如果你看的头大，可以直接下载我编译好的版本"><a href="#如果你看的头大，可以直接下载我编译好的版本" class="headerlink" title="如果你看的头大，可以直接下载我编译好的版本"></a>如果你看的头大，可以直接下载我编译好的版本</h4><blockquote><p><a href="https://pan.baidu.com/s/157WM-L-kUU6OmYy4srewvw">AssetStudio-0.15.0</a> 提取码：d174</p></blockquote><h3 id="GalPhotoAuto"><a href="#GalPhotoAuto" class="headerlink" title="GalPhotoAuto"></a>GalPhotoAuto</h3><blockquote><p>用于合成GALGAME解包后的图片程序。</p><p>下载链接: <a href="https://blog.ztjal.info/?dl_id=10">https://blog.ztjal.info/?dl_id=10</a><br>下载链接：<a href="https://pan.baidu.com/s/1oySXwL6B_K7w1Knsy4fhyg">https://pan.baidu.com/s/1oySXwL6B_K7w1Knsy4fhyg</a> 提取码：oqt2 </p><p>博客: <a href="https://blog.ztjal.info/my-computer-using/hate-software/galphotoauto">https://blog.ztjal.info/my-computer-using/hate-software/galphotoauto</a></p></blockquote><p>❗更多信息见博客或程序包中的说明文件</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="使用思路"><a href="#使用思路" class="headerlink" title="使用思路"></a>使用思路</h3><ul><li>获取游戏资源(获取原始文件)</li><li>使用AssetStudio提取游戏的加密资源(解密文件)</li><li>对于提取出的资源进行二次处理(即是将文件变成可以被其他软件使用的形式)</li></ul><h3 id="方法步骤"><a href="#方法步骤" class="headerlink" title="方法步骤"></a>方法步骤</h3><blockquote><p>获取游戏资源</p></blockquote><ul><li>明日方舟APK下载链接：<code>https://ak.hypergryph.com/downloads/android_lastest</code></li><li>将<code>.apk</code>改为<code>.zip</code>，解压<code>assets\AB\Android</code>目录</li></ul><blockquote><p>提取游戏资源</p></blockquote><ul><li>运行<code>AssetStudioGUI.exe</code> -&gt; <code>File</code> -&gt; <code>Load folder</code> -&gt; 选择<code>Android </code>文件夹-&gt; 文件载入</li><li>点击<code>Filter Type</code>: 类型筛选(仅简单介绍部分)<ul><li><code>AudioClip</code>: 游戏音乐</li><li><code>Mesh</code>: 游戏中的实体模型</li><li><code>Sprite</code>: 一种特殊的图片，场景中的Sprite可以像普通的3D游戏物体一样对待</li><li>🔥<code>Texture2D</code>: 二维图片，游戏内的贴图资源</li></ul></li><li>点击<code>Export</code> -&gt; <code>Filtered assets</code> -&gt; 导出所筛选资源</li><li>若导出Texture2D类型文件则保存在Texture2D文件夹中</li></ul><blockquote><p>二次处理(以Texture2D为例)</p><p>立绘被分成了两张图，一个储存的是 RGB 通道的信息，另一个储存的是 Alpha 通道的信息，因此需要把两个通道合并</p><p>下载<a href="https://pan.baidu.com/s/1fY42ZQtTM93EMbBcdwn-lQ">批量修改文件名(明日方舟立绘).vbs</a> 提取码：hgp1</p></blockquote><ul><li><p>复制<code>批量修改文件名(明日方舟立绘).vbs</code>到<code>Texture2D</code>目录下，双击运行，等待至脚本弹出”文件重命名处理完成”对话框</p></li><li><p>运行<code>GalPhotoAuto.exe</code>  -&gt; 选择<code>(2)添加处理图片</code> -&gt; 模式二（添加文件夹） -&gt; 点击<code>(2)选择合成规则</code></p></li><li><p> 依次点开：常规合成规则 -&gt; 源图与ALPHA分开为两张图 -&gt; 模式二：添加文件夹，自动合成，以“_m”结尾的合成，xxx.bmp是源图，xxx_m.bmp是作为ALPHA 4，点击执行即可</p></li><li><p>合成完毕的文件，名字里会包含merge，需要手动筛选</p></li></ul><h2 id="我的方案"><a href="#我的方案" class="headerlink" title="我的方案"></a>我的方案</h2><details><summary>暂未完成</summary><blockquote><p>上述的方案适合小白，以下方案适合有一定编程基础的玩家</p></blockquote><blockquote><p>👉首先，准备好游戏安装包，并提取出所需资源(Texture2D)</p><p>配套源码在文章开头的Github链接中😘</p><p>下面开始二次处理: </p></blockquote><h3 id="从Texture2D中筛选char开头的文件"><a href="#从Texture2D中筛选char开头的文件" class="headerlink" title="从Texture2D中筛选char开头的文件"></a>从Texture2D中筛选char开头的文件</h3><ul><li><p><em>Texture2D_path</em> 是你提取的目录</p></li><li><p><em>destPath</em> 是char文件保存的目录</p></li><li><p>仅需要更改或输入<code>Texture2D_path</code></p></li></ul><h3 id="合成图片"><a href="#合成图片" class="headerlink" title="合成图片"></a>合成图片</h3><blockquote><p>图片是两两对应的，你会发现总文件数却是奇数，原因是多了一个<code>char_any.png</code>，就是你每次抽卡都会出现的黑色小人(‾◡◝)，莫慌</p></blockquote><ul><li>文件主要分两种 <em>源图</em> 和 <em>alpha</em> 图，二者一一对应</li><li>原图又分一下几种:<ul><li><code>char_编号_名字</code>: 四肢散落一地图(bushi)</li><li>🔥<code>char_编号_名字_1</code>: 初始立绘</li><li>🔥<code>char_编号_名字_1+</code>: 精1立绘（阿米娅特有）</li><li>🔥<code>char_编号_名字_2</code>: 精2立绘</li><li>🔥<code>char_编号_名字_代号</code>: 皮肤立绘</li></ul></li><li>文件名中带 <em>[alpha]</em> 为alpha文件</li></ul></details><hr><p><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/anime/tobecontinued.jpg" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
          <category> 自制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 明日方舟 </tag>
            
            <tag> 解包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【明日方舟】wallpaper engine分享</title>
      <link href="2020/07/11/wallpaper_shared/"/>
      <url>2020/07/11/wallpaper_shared/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>分享自制的壁纸，随缘更新，欢迎来踩😘<br>在wallpaper engine应用或创意工坊搜索对应名称即可获取😋<br>斯卡蒂真是太棒了😍<br><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/albums/arknights_Skadi/001.png" alt="泳装斯卡蒂"  / loading="lazy"></p><span id="more"></span><blockquote><h2 id="第一弹"><a href="#第一弹" class="headerlink" title="第一弹"></a>第一弹</h2><p>名称：【明日方舟】从那高地上远眺-EP（无缝循环）<br><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/wallpaper_shared/001.png" style="zoom:;" / loading="lazy"></p></blockquote><blockquote><h2 id="第二弹"><a href="#第二弹" class="headerlink" title="第二弹"></a>第二弹</h2><p>名称：【明日方舟】冬涤-无缝循环<br><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/post/wallpaper_shared/002.png" style="zoom:;" / loading="lazy"></p></blockquote><hr><p><img src="https://cdn.jsdelivr.net/gh/Sknp1006/cdn@master/img/anime/tobecontinued.jpg" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
          <category> 自制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 明日方舟 </tag>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github爬虫项目归档</title>
      <link href="2020/07/03/Github_Crawler/"/>
      <url>2020/07/03/Github_Crawler/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="crawlers"><a href="#crawlers" class="headerlink" title="crawlers"></a>crawlers</h1><p>简介：基于scrapy的爬虫项目，主要是做着玩，并探索scrapy~  <a href="https://github.com/Sknp1006/crawler">github</a></p><span id="more"></span><h2 id="BiliBili-crawler"><a href="#BiliBili-crawler" class="headerlink" title="BiliBili crawler"></a>BiliBili crawler</h2><h3 id="项目描述："><a href="#项目描述：" class="headerlink" title="项目描述："></a>项目描述：</h3><ul><li>这是一个用于抓取哔哩哔哩视频弹幕和评论的爬虫，抓取范围是自己关注列表里全部UP主的视频。  </li></ul><h2 id="AoiSloa-crawler"><a href="#AoiSloa-crawler" class="headerlink" title="AoiSloa crawler"></a>AoiSloa crawler</h2><h3 id="项目描述：-1"><a href="#项目描述：-1" class="headerlink" title="项目描述："></a>项目描述：</h3><ul><li>绅士必备，妹子图爬虫( •̀ ω •́ )✧  </li><li>在原同名项目的基础上修改了网站，以及优化了下载参数，添加了log.txt</li><li>未来应该会有更多功能加入，敬请期待~<h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3></li><li>scrapy.Request与response.follow好像有性能上的差距，体现在使用follow的callback调用自己时，下载无法达到较高速度。  </li><li>其次是用follow无法传递meta字典，我需要传递图片所在的分区名，例如：meinv<h3 id="一些参数："><a href="#一些参数：" class="headerlink" title="一些参数："></a>一些参数：</h3></li></ul><ol><li><p>深度优先</p><blockquote><blockquote><p>DEPTH_PRIORITY = 0<br>SCHEDULER_DISK_QUEUE = ‘scrapy.squeues.PickleLifoDiskQueue’<br>SCHEDULER_MEMORY_QUEUE = ‘scrapy.squeues.LifoMemoryQueue’  </p></blockquote></blockquote></li><li><p>广度优先  </p><blockquote><blockquote><p>DEPTH_PRIORITY = 1<br>SCHEDULER_DISK_QUEUE = ‘scrapy.squeues.PickleFifoDiskQueue’<br>SCHEDULER_MEMORY_QUEUE = ‘scrapy.squeues.FifoMemoryQueue’  </p></blockquote></blockquote></li><li><p>AutoThrottle extension  </p><blockquote><blockquote><p>AUTOTHROTTLE_ENABLED = True<br>AUTOTHROTTLE_START_DELAY = 0<br>AUTOTHROTTLE_MAX_DELAY = 60<br>AUTOTHROTTLE_TARGET_CONCURRENCY = 10.0<br>AUTOTHROTTLE_DEBUG = False<br>DOWNLOAD_DELAY = 0.1</p></blockquote></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 爬虫项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
